<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2017 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd"
       default-lazy-init="true" default-autowire="byName">

    <bean id="testDataSourceFactory" class="com.evolveum.midpoint.repo.sql.DataSourceFactory" destroy-method="destroy">
        <property name="configuration" value="#{testSqlRepositoryFactory.sqlConfiguration}"/>
    </bean>

    <bean id="testDataSource" factory-bean="testDataSourceFactory" factory-method="createDataSource"
          depends-on="testDataSourceFactory"/>

    <!-- Proxied data source used to collect SQL statements -->

    <bean id="proxiedTestDataSource" primary="true" class="net.ttddyy.dsproxy.support.ProxyDataSource">
        <property name="dataSource" ref="testDataSource"/>
        <property name="proxyConfig" ref="proxyConfig"/>
    </bean>

    <bean id="proxyConfig"
          factory-bean="proxyConfigSupport"
          factory-method="create"/>

    <bean id="proxyConfigSupport" class="net.ttddyy.dsproxy.support.ProxyConfigSpringXmlSupport">
        <property name="dataSourceName" value="my-ds"/>
        <property name="queryListener" ref="queryChainListener"/>        <!-- this is bound to be ChainListener (unfortunately) -->
<!--        <property name="methodListener" ref="methodListener"/>-->
    </bean>

    <bean id="queryChainListener" class="net.ttddyy.dsproxy.listener.ChainListener">
        <property name="listeners">
            <list>
                <ref bean="testQueryListener"/>
            </list>
        </property>
    </bean>

    <!-- We don't need this (under normal circumstances) -->
<!--    <bean id="methodListener" class="net.ttddyy.dsproxy.listener.CompositeMethodListener">-->
<!--        <property name="listeners">-->
<!--            <list>-->
<!--                <bean class="net.ttddyy.dsproxy.listener.TracingMethodListener"/>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

    <!-- Hibernate session factory -->
    <bean id="testSessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
          depends-on="proxiedTestDataSource" lazy-init="true">

        <property name="dataSource" ref="proxiedTestDataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">#{testSqlRepositoryFactory.sqlConfiguration.hibernateDialect}</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">#{testSqlRepositoryFactory.sqlConfiguration.hibernateHbm2ddl}</prop>
                <prop key="hibernate.id.new_generator_mappings">true</prop>
                <prop key="hibernate.jdbc.batch_size">20</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <prop key="hibernate.transaction.coordinator_class">jdbc</prop>
                <prop key="hibernate.hql.bulk_id_strategy">org.hibernate.hql.spi.id.inline.InlineIdsOrClauseBulkIdStrategy</prop>
                <prop key="hibernate.session_factory.statement_inspector">com.evolveum.midpoint.repo.sql.testing.TestStatementInspector</prop>
                <!-- Todo implement strategy that will not do select when where clause contains only equals on primary key -->
                <!--<prop key="hibernate.hql.bulk_id_strategy">com.evolveum.midpoint.repo.sql.util.EmptyMultiTableBulkIdStrategy</prop>-->
            </props>
        </property>
        <property name="implicitNamingStrategy">
            <bean class="com.evolveum.midpoint.repo.sql.util.MidPointImplicitNamingStrategy"/>
        </property>
        <property name="physicalNamingStrategy">
            <bean class="com.evolveum.midpoint.repo.sql.util.MidPointPhysicalNamingStrategy"/>
        </property>
        <property name="annotatedPackages">
            <list>
                <value>com.evolveum.midpoint.repo.sql.type</value>
            </list>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.evolveum.midpoint.repo.sql.data.common</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.any</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.container</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.embedded</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.enums</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.id</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.other</value>
                <value>com.evolveum.midpoint.repo.sql.data.common.type</value>
                <value>com.evolveum.midpoint.repo.sql.data.audit</value>
            </list>
        </property>
        <property name="entityInterceptor">
            <ref bean="testInterceptor"/>
        </property>
    </bean>

    <context:annotation-config/>
    <context:component-scan base-package="com.evolveum.midpoint.repo.sql"/>

</beans>
