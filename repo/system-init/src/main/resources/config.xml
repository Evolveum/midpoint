<?xml version="1.0"?>
<!--
  ~ Copyright (C) 2010-2021 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<!--
Configuration key-value can be added or overridden using -Dkey=value JVM argument.
Key is a path to element, starting at "midpoint", separated with "." - for example:
-Dmidpoint.repository.asServer=false
or
-Dmidpoint.profilingEnabled=true
See more: https://docs.evolveum.com/midpoint/reference/deployment/midpoint-home-directory/overriding-config-xml-parameters/

It is also possible to read values from file - to do so:
- use "_FILE" suffix for key element, e.g. keyStorePassword_FILE
- specify path to the file as its value
- subsequently, value of key without the _FILE suffix will be set to the content of the file
Notes:
- The content of the file will be used as-is, including any newlines, including trailing ones.
- If the file is missing error is logged, but the startup continues (value will be null).
- Relative paths are resolved from current working directory, better specify absolute path or
  start with "${midpoint.home}" (without quotes) can also be used and will be resolved.
  (Please use / to separate it from the rest of the path, because while it internally ends
  with / now, this behaviour will likely change later.)
Example (from under midpoint/keystore element):
<keyStorePassword_FILE>${midpoint.home}/keystore.pass</keyStorePassword_FILE>

The _FILE feature is not to be confused with elements like <keyStorePath> where the path
to a file, not its content, is the actual value.
-->
<configuration>
    <midpoint>
        <webApplication>
            <importFolder>${midpoint.home}/import</importFolder>
        </webApplication>
        <repository>
            <!--
            Uncomment this section to use the new Native repository (and comment the rest).
            For more see: https://docs.evolveum.com/midpoint/reference/repository/configuration/
            Don't forget to switch Sql/Sqale audit service factory accordingly (lower in this config).
            <type>native</type>
            <jdbcUrl>jdbc:postgresql://localhost:5432/midpoint</jdbcUrl>
            <jdbcUsername>midpoint</jdbcUsername>
            <jdbcPassword>password</jdbcPassword>
            -->

            <!-- Old Generic repository configured for embedded H2 for quick start. -->
            <repositoryServiceFactoryClass>com.evolveum.midpoint.repo.sql.SqlRepositoryFactory</repositoryServiceFactoryClass>
            <baseDir>${midpoint.home}</baseDir>
            <asServer>true</asServer>
        </repository>
        <audit>
            <auditService>
                <auditServiceFactoryClass>com.evolveum.midpoint.audit.impl.LoggerAuditServiceFactory</auditServiceFactoryClass>
            </auditService>
            <auditService>
                <!-- Use SqlAuditServiceFactory for old generic repository and SqaleAuditServiceFactory for new Native one. -->
                <auditServiceFactoryClass>com.evolveum.midpoint.repo.sql.SqlAuditServiceFactory</auditServiceFactoryClass>
                <!--<auditServiceFactoryClass>com.evolveum.midpoint.repo.sqale.audit.SqaleAuditServiceFactory</auditServiceFactoryClass>-->
            </auditService>
        </audit>
        <icf>
            <scanClasspath>true</scanClasspath>
            <scanDirectory>${midpoint.home}/icf-connectors</scanDirectory>
            <scanDirectory>${midpoint.home}/connid-connectors</scanDirectory>
        </icf>
        <keystore>
            <keyStorePath>${midpoint.home}/keystore.jceks</keyStorePath>
            <keyStorePassword>changeit</keyStorePassword>
            <encryptionKeyAlias>default</encryptionKeyAlias>
            <!--
            By default, AES 128-bit key is generated if keystore does not exist and midPoint creates it.

            To generate keystore before the first start with keytool use command:
            keytool -genseckey -alias default -keystore keystore.jceks -storetype jceks -keyalg AES -keysize 256

            Use 'midpoint' as a password for the secret key when prompted (after the keystore password).
            Note, that only AES algorithm is supported by midPoint at this moment.

            You can also generate your own key later with the same command (and different alias).
            Then specify its alias as a default for all new passwords in <encryptionKeyAlias>.
            Old passwords will be fine, just don't delete the previous key.
            See more here: https://docs.evolveum.com/midpoint/reference/security/crypto/
            -->
        </keystore>
        <!-- <profilingEnabled>true</profilingEnabled> -->
    </midpoint>
</configuration>
