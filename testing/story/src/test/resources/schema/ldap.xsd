<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!--
  ~ Copyright (c) 2019 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->
<xsd:schema elementFormDefault="qualified"
            targetNamespace="http://midpoint.evolveum.com/xml/ns/story/ldap/ext"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/story/ldap/ext"
            xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <!-- user extension -->

    <xsd:complexType name="UserTypeExtensionType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:extension ref="c:UserType"/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="titleMap" type="tns:QuasiMapType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Container that somehow simulates polystring. But it is quasi-map form.
                        Key is language code, value is translated text.
                        MID-5264
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="memberOf" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:indexed>false</a:indexed>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="QuasiMapType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container>true</a:container>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="key" type="xsd:string" minOccurs="1"/>
            <xsd:element name="value" type="xsd:string" minOccurs="1"/>
        </xsd:sequence>
    </xsd:complexType>

</xsd:schema>
