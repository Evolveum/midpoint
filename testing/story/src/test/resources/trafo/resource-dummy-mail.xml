<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2017 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resource oid="14400000-0000-0000-0000-000000000001"
		  xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
          xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
          xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
          xmlns:icfs="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3"
          xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3"
          xmlns:mr="http://prism.evolveum.com/xml/ns/public/matching-rule-3"
          xmlns:trafo="http://midpoint.evolveum.com/xml/ns/story/trafo/ext"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<name>Dummy Mail</name>
	<connectorRef type="c:ConnectorType">
		<filter>
			<q:and>
				<q:equal>
					<q:path>connectorType</q:path>
					<q:value>com.evolveum.icf.dummy.connector.DummyConnector</q:value>
				</q:equal>
				<q:equal>
					<q:path>connectorVersion</q:path>
					<q:value>2.0</q:value>
				</q:equal>
			</q:and>
		</filter>
	</connectorRef>
	<connectorConfiguration xmlns:icfi="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/bundle/com.evolveum.icf.dummy/com.evolveum.icf.dummy.connector.DummyConnector"
	               xmlns:icfc="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/connector-schema-3">
					   
		<icfc:configurationProperties>
			<icfi:instanceId>mail</icfi:instanceId>
			<icfi:caseIgnoreId>true</icfi:caseIgnoreId>
			<icfi:uidMode>uuid</icfi:uidMode>
		</icfc:configurationProperties>
		
		<icfc:resultsHandlerConfiguration>
 			<icfc:enableFilteredResultsHandler>true</icfc:enableFilteredResultsHandler>  
 			<icfc:enableCaseInsensitiveFilter>true</icfc:enableCaseInsensitiveFilter> 
		</icfc:resultsHandlerConfiguration>

	</connectorConfiguration>

        <schemaHandling>

            <objectType>
                <intent>default</intent>
                <displayName>Default Account</displayName>
                <default>true</default>
                <objectClass>ri:AccountObjectClass</objectClass>
                <attribute>
                    <ref>icfs:uid</ref>
                    <displayName>GUID</displayName>
					<limitations>
						<access>
							<read>true</read>
						</access>
					</limitations>
                </attribute>
                <attribute>
                    <ref>icfs:name</ref>
                    <displayName>Name</displayName>
					<limitations>
						<access>
							<read>true</read>
							<add>true</add>
							<modify>true</modify>
						</access>
					</limitations>
					<matchingRule>mr:stringIgnoreCase</matchingRule>
		                    <outbound>
		                        <source>
		                        	<path>$user/givenName</path>
		                        </source>
		                        <source>
		                        	<path>$user/familyName</path>
		                        </source>
		                        <source>
		                        	<path>$user/employeeNumber</path>
		                        </source>
		                        <source>
		                        	<path>$user/employeeType</path>
		                        </source>
					<expression>
						<script>
							<code>
<!--
FIXME: if people use two given/family names, icfs:name will be generated as:
John james Smith/...

To avoid, customer needs to explicitly specify, if the multiple names will be
in multivalue attributes Given Name / Family Name, or Middle Name. The
expressions in the schema handling are NOT prepared for this yet.
-->

if ((!basic.isEmpty(employeeNumber)) &amp;&amp; (basic.stringify(employeeType) == 'T' || basic.stringify(employeeType) == 'R') || basic.stringify(employeeType) == 'D' || basic.stringify(employeeType) == 'S')
	basic.concatName(basic.norm(basic.stringify(givenName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } ) ,\
		basic.norm(basic.stringify(familyName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } )) \
+ '/' + employeeNumber + '/TRAFO/XX'
else
	basic.concatName(basic.norm(basic.stringify(givenName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } ) ,\
		basic.norm(basic.stringify(familyName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } ))  \
+ iterationToken + '/TRAFO/XX'
							</code>
						</script>
					</expression>
		                    </outbound>
		                    <inbound>
					<strength>weak</strength>
					<expression>
						<script>
							<code>
<!-- If icfs:name contains /\d+/, it's an employe, let's return ps+employee number -->

nameRegExp = /(?i)^(?:.*)\/(\d+)\/TRAFO\/XX$/

matcher = (input =~ nameRegExp)
if (matcher.matches()) {
	return 'ps' + matcher[0][1]
}
							</code>
						</script>
					</expression>
                    <target>
                    	<path>$user/name</path>
                    </target>
                </inbound>
            </attribute>

            <attribute>
                <ref>ri:FirstName</ref>
                <displayName>FirstName</displayName>
                <outbound>
                    <source>
                    	<path>$user/givenName</path>
                    </source>
					<expression>
						<script>
							<code>
basic.norm(basic.stringify(givenName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } )
					</code>
				</script>
			</expression>
                    </outbound>
                    <inbound>
			<strength>weak</strength>
                        <target>
                            <path>$user/givenName</path>
                        </target>
                    </inbound>

                </attribute>
                <attribute>
                    <ref>ri:LastName</ref>
                    <displayName>LastName</displayName>
                    <outbound>
                        <source>
                        	<path>$user/familyName</path>
                        </source>
						<expression>
							<script>
								<code>
basic.norm(basic.stringify(familyName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } ) + iterationToken
							</code>
						</script>
					</expression>
                    </outbound>
                    <inbound>
						<strength>weak</strength>
                        <target>
                            <path>$user/familyName</path>
                        </target>
                    </inbound>
                </attribute>
                       <attribute>
                       
                    <ref>ri:internalId</ref>
                    <displayName>Generated ID by resource</displayName>
                    <inbound>
					    <target>
                            <path>$user/extension/trafo:uid</path>
                        </target>
                    </inbound>
                </attribute>
                <attribute>
                    <ref>ri:ShortName</ref>
                    <displayName>ShortName</displayName>
				    <limitations>
						<minOccurs>0</minOccurs>
						<maxOccurs>unbounded</maxOccurs>
				    </limitations>
                    <matchingRule>mr:stringIgnoreCase</matchingRule>
                    <outbound>
                        <source>
                        	<path>$user/givenName</path>
                        </source>
                        <source>
                        	<path>$user/familyName</path>
                        </source>
                        <source>
                        	<path>$user/employeeNumber</path>
                        </source>
                        <source>
                        	<path>$user/name</path>
                        </source>
						<expression>
							<script>
								<code>
tmpGivenNameInitial = basic.stringify(givenName)?.size() &gt; 0 ? basic.norm((basic.stringify(givenName)).substring(0,1)) : ''
tmpList = []
if (!basic.isEmpty(employeeNumber)) {
	tmpList.add(tmpGivenNameInitial + basic.norm(basic.stringify(familyName))?.replace(' ', '') + iterationToken)
	tmpList.add('PS' + employeeNumber)
} else
	tmpList.add(basic.norm(basic.stringify(name)) + iterationToken)

return tmpList
								</code>
							</script>
						</expression>
                    </outbound>
                    <inbound>
						<strength>weak</strength>
<!-- This is for external accounts to pass to $user/name when creating midPoint users -->
						<source>
							<name>name</name>
							<path>$account/attributes/icfs:name</path>
						</source>
						<expression>
							<script>
	                            <relativityMode>absolute</relativityMode><!-- FIX for multivalue -->
								<code>
<!-- If icfs:name does not contain /\d+/, it's an external -->
nameRegExp = /(?i)^(?:.*)\/(\d+)\/TRAFO\/XX$/

matcher = (name =~ nameRegExp)
if (!matcher.matches()) {
log.info('XXXXX got here, input = {}', input)
	if (input?.size() &gt; 1) return basic.norm(input?.get(0))<!-- FIXME FIXME FIXME the first value may not be it !!!! random order -->
	else return basic.norm(input)
}
								</code>
							</script>
						</expression>
                        <target>
                        	<path>$user/name</path>
                        </target>
                    </inbound>
                </attribute>
                <attribute>
                    <ref>ri:idFile</ref>
                    <displayName>ID File</displayName>
		    <limitations>
				<minOccurs>0</minOccurs>
				<access>
					<read>true</read>
					<add>true</add>
					<modify>false</modify>
				</access>
		    </limitations>
                    <matchingRule>mr:stringIgnoreCase</matchingRule>
                    <outbound>
                        <strength>weak</strength>           <!-- to be applied only on object creation -->
                        <source>
                        	<path>$user/givenName</path>
                        </source>
                        <source>
                        	<path>$user/familyName</path>
                        </source>
			<expression>
				<script>
					<code>
tmpGivenNameInitial = basic.stringify(givenName)?.size() &gt; 0 ? basic.norm((basic.stringify(givenName)).substring(0,1)) : ''
<!-- FIXME production path -->
if (midpoint.hasLinkedAccount('ef2bc95b-76e0-48e2-86d6-a000ff000003'<!-- AD oid -->) &amp;&amp;\
<!-- folderTMP is not empty, so this is some guarantee the account should have ID stored on the share -->
  !basic.isEmpty(basic.stringify(basic.getExtensionPropertyValue(user, 'http://midpoint.evolveum.com/xml/ns/story/trafo/ext', 'homedir')))) return '\\\\medusa\\dfss\\ID\\' \
	+ basic.stringify(user.getFamilyName()) + '_' + basic.stringify(user.getName()) + '\\' \
	+ basic.norm(tmpGivenNameInitial + basic.stringify(familyName)) + iterationToken + '.id'
else return 'c:\\install\\test-id-folder\\' + basic.norm(tmpGivenNameInitial + basic.stringify(familyName)) + iterationToken + '.id'<!-- FIXME production path path -->
					</code>
				</script>
			</expression>
                    </outbound>
                    <inbound><!-- As the "update=false" is specified above, this will not be updated -->
			
			<expression>
				<script>
					<code>
pathRegExp = /(?i)^(.*)\\[^\\]+\.id$/
matcher = (input =~ pathRegExp)
if (matcher.matches()) {
	return matcher[0][1]
}
					</code>
				</script>
			</expression>
                        <target>
                            <path>$user/extension/trafo:homedir</path>
                        </target>
                    </inbound>
                </attribute>
                <attribute>
                    <ref>ri:MailFile</ref>
                    <displayName>MailFile</displayName>
                    <description>This attribute should not be updated once created, because it would need the mail db renaming</description>
                    <outbound>
			<strength>weak</strength>
			<source>
				<path>name</path>
			</source>
			<source>
				<path>givenName</path>
			</source>
			<source>
				<path>familyName</path>
			</source>
			<source>
				<path>employeeNumber</path>
			</source>
			<source>
				<path>employeeType</path>
			</source>
                        <expression>
                        	<script>
					<code>
tmpGivenNameInitial = basic.stringify(givenName)?.size() &gt; 0 ? basic.norm((basic.stringify(givenName)).substring(0,1)) : ''
tmpFamilyNameInitial = basic.stringify(familyName)?.size() &gt; 0 ? basic.norm((basic.stringify(familyName)).substring(0,1)) : ''

if ((!basic.isEmpty(employeeNumber)) &amp;&amp; (basic.stringify(employeeType) == 'T' || basic.stringify(employeeType) == 'R') || basic.stringify(employeeType) == 'D' || basic.stringify(employeeType) == 'S')
	'mail\\' + tmpGivenNameInitial + tmpFamilyNameInitial + employeeNumber
else <!-- External: reuse midPoint logon name (flastname) -->
	'mail\\' + basic.norm(basic.stringify(name)) + iterationToken
					</code>
				</script>
                        </expression>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:MailDomain</ref>
                    <displayName>MailDomain</displayName>
                    <outbound>
			<strength>weak</strength>
                        <expression>
                        	<value>TRAFO</value>
                        </expression>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:InternetAddress</ref>
                    <displayName>Internet Address</displayName>
                    <outbound>
                        <source>
				<name>givenName</name>
                        	<path>$user/givenName</path>
                        </source>
                        <source>
				<name>familyName</name>
                        	<path>$user/familyName</path>
                        </source>
			<source>
				<path>$user/employeeType</path>
			</source>
			<expression>
				<script>
					<code>
	if (givenName &amp;&amp; familyName) dot = '.'
	else dot = ''
	basic.norm(basic.stringify(givenName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } )?.replace(' ', '') \
	+ dot + \
	basic.norm(basic.stringify(familyName))?.replaceAll(/\w+/, { it[0].toUpperCase() + ((it.size() > 1) ? it[1..-1] : '') } )?.replace(' ', '') + iterationToken + '@trafo.xx'
					</code>
				</script>
			</expression>
                    </outbound>
                    <inbound>
                        <target>
                            <path>$user/emailAddress</path>
                        </target>
<!--
			<condition>
				<script>
					<code>
						input != null
					</code>
				</script>
			</condition>-->
                    </inbound>
                </attribute>
		<dependency>
			<resourceRef oid='14400000-0000-0000-0000-000000000003'/>
			<strictness>relaxed</strictness>
		</dependency>
		<iteration>
			<maxIterations>10</maxIterations>

			<tokenExpression>
				<script>
					<code>
if (iteration == 0)
	return ""
else return ""+(iteration+1)
					</code>
				</script>
			</tokenExpression>

			<postIterationCondition>
				<variable>
					<name>userid</name>
					<path>$shadow/attributes/ri:ShortName</path>
				</variable>
				<variable>
					<name>mail</name>
					<path>$shadow/attributes/ri:InternetAddress</path>
				</variable>
				<script>
					<code>
if (mail == null) tmpUniqueMail = true
else tmpUniqueMail = midpoint.isUniqueAccountValue(resource, shadow, 'InternetAddress', mail)
tmpRegExp = /(?i)^PS\d\d\d\d$/

if (userid?.size() &gt; 1) {
	for (i = 0; i &lt; userid?.size(); i++) {
		tmpMatcher = (userid[i] =~ tmpRegExp)
<!-- We only set 1-2 values, so finish (return) if we have found the non-psXXXX -->
		if (!tmpMatcher.matches()) return tmpUniqueMail &amp;&amp; midpoint.isUniqueAccountValue(resource, shadow, 'ShortName', userid[i])
 
	}
}
else return tmpUniqueMail &amp;&amp; midpoint.isUniqueAccountValue(resource, shadow, 'ShortName', userid)
					</code>
				</script>
			</postIterationCondition>
		</iteration>
<!-- Generated by the following script:

cat accounts-2013-10-10-11-49-02.xml| grep icfs:name | sed 's/ xmlns:icfs="http:\/\/midpoint.evolveum.com\/xml\/ns\/public\/connector\/icf-1\/resource-schema-2">/>/' | sed 's/ \+//' | grep -v -P '\d\d\d\d' | sed 's/\(.*\)/<protected>\n\1\n<\/protected>/'
where the 'accounts-xxx.xml' is the account list as provided by Extract
accounts feature
-->
            <activation>
                <existence>
                    <outbound>
<strength>weak</strength>
                        <expression>
                            <path>$focusExists</path>
                        </expression>
                    </outbound>
                    <outbound>
                      <name>Delayed delete after account is unassigned and account is disabled</name>
                      <timeFrom>
                        <referenceTime>
                          <path>$shadow/activation/disableTimestamp</path>
                        </referenceTime>
                        <offset>P1D</offset>
                      </timeFrom>
                      <source>
                        <path>$shadow/activation/administrativeStatus</path>
                      </source>
                      <source>
                        <path>$shadow/activation/disableReason</path>
                      </source>
                      <expression>
                        <value>false</value>
                      </expression>
                      <condition>
                        <script>
                          <code>
				import com.evolveum.midpoint.xml.ns._public.common.common_3.ActivationStatusType;
				import com.evolveum.midpoint.schema.constants.SchemaConstants;
				// do not delete explicitly disabled accounts
				administrativeStatus == ActivationStatusType.DISABLED &amp;&amp; 
				(disableReason == SchemaConstants.MODEL_DISABLE_REASON_DEPROVISION) // || disableReason == SchemaConstants.MODEL_DISABLE_REASON_MAPPED);
                          </code>
                         </script>
                       </condition>
                     </outbound>
                </existence>
                <administrativeStatus>
                    <outbound>
                        <expression>
                            <script>
                                <code>
                                    import com.evolveum.midpoint.xml.ns._public.common.common_3.ActivationStatusType;
                                    if (legal) {
                                        input;
                                    } else {
                                        ActivationStatusType.DISABLED;
                                    }
                                </code>
                            </script>
                        </expression>
                    </outbound>
                    <inbound>
                        <strength>weak</strength>
                    </inbound>
                </administrativeStatus>
            </activation>
                    
                <credentials>
                    <password>
                        <outbound>
<!-- Initial seed: The password is sent to resource only when changing from GUI -->
                            <channel>http://midpoint.evolveum.com/xml/ns/public/gui/channels-3#user</channel>
			</outbound>
                        <inbound>
                            <strength>weak</strength>
                            <expression>
                                <generate/>
                            </expression>
                        </inbound>
			<!--<passwordPolicyRef oid="81818181-76e0-59e2-8888-3d4f02d3ffff" type="c:ValuePolicyType"/>-->
                    </password>
                </credentials>
            </objectType>
        </schemaHandling>
       <capabilities xmlns:cap="http://midpoint.evolveum.com/xml/ns/public/resource/capabilities-3">
            <configured>
		<cap:activation>
			<cap:status>
				<cap:attribute>ri:disabled</cap:attribute>
				<cap:enableValue>false</cap:enableValue>
				<cap:disableValue>true</cap:disableValue>
			</cap:status>
		</cap:activation>
	    </configured>
        </capabilities>
        <synchronization>
        	<objectSynchronization>
	            <!--
	                The synchronization for this resource is enabled.
	                It means that the synchronization will react to changes detected by
	                the system (live sync task, discovery or reconciliation) -->
	            <enabled>true</enabled>
	
	            <correlation>
	                <q:description>
			Correlation rule for both internal employees and external accounts.
	                </q:description>
			<q:or>
				<q:equal>
<!-- FIXME FIXME FIXME FIXME FIXME

Maybe ShortName (Shortname) could be used for internal and external accounts.
If the very first value is the actual.

FIXME FIXME FIXME FIXME -->

<!-- The connector provides icfs:name as a single-value attribute. -->
					<q:path>c:employeeNumber</q:path>
					<expression>
			                        <script>
							<code>

tmpName = basic.getAttributeValue(account, 'http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3', 'name')
nameRegExp = /(?i)^(?:.*)\/(\d+)\/TRAFO\/XX$/

matcher = (tmpName =~ nameRegExp)
if (matcher.matches()) return matcher[0][1]
else return '###ThisIsAnExpressionThatWillNeverMatchUserEmployeeNumber###'
							</code>
		                                </script>
					</expression>
				</q:equal>
				<q:equal>
					<q:matching>polyStringNorm</q:matching>
					<q:path>c:name</q:path>
					<expression>
			                        <script>
							<code>
tmpName = basic.getAttributeValue(account, 'http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3', 'name')
nameRegExp = /(?i)^(?:.*)\/(\d+)\/TRAFO\/XX$/

matcher = (tmpName =~ nameRegExp)
if (!matcher.matches()) {
  tmpShortName = basic.getAttributeValues(account, 'ShortName')

  if (tmpShortName?.size() &gt; 1) tmpShortName = tmpShortName?.get(0)
<!-- ShortName may be multivalued, take the FIRST value and normalize. This is the jsmith value according to the test data. -->
<!-- FIXME FIXME FIXME FIXME this may not be true !!!!!!!!!!!!!!!!!!!!!!! random order !!!! -->
  return basic.norm(tmpShortName)
}
else return '###ThisIsAnExpressionThatWillNeverMatchUserName2330587969###'
							</code>
		                                </script>
					</expression>
				</q:equal>
			</q:or>
	            </correlation>
	
	            <!-- Confirmation rule may be here, but as the search above will
	                 always return at most one match, the confirmation rule is not needed. -->
	
	            <!-- Following section describes reactions to a situations.
	                 The setting here assumes that this resource is authoritative,
	                 therefore all accounts created on the resource should be
	                 reflected as new users in IDM.
	                 See http://wiki.evolveum.com/display/midPoint/Synchronization+Situations
	             -->
	            <reaction>
	                <situation>linked</situation>
	                <action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#modifyUser"/>
	            </reaction>
	            <reaction>
	                <situation>deleted</situation>
	                <action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#unlinkAccount"/>
	            </reaction>
	            <reaction>
	                <situation>unlinked</situation>
	                <action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#linkAccount"/>
	            </reaction>

	            <reaction>
<!-- FIXME: Production: change to disableAccount or something else -->
	                <situation>unmatched</situation>
<!--
	                <action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#addUser">
				<objectTemplateRef oid="10000000-0000-0000-0000-a000fe000002"/>
	                </action>-->
	            </reaction>
			</objectSynchronization>
        </synchronization>
    </resource>
