<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2017 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resource oid="14400000-0000-0000-0000-000000000003"
		  xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
          xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
          xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
          xmlns:icfs="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3"
          xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3"
          xmlns:mr="http://prism.evolveum.com/xml/ns/public/matching-rule-3"
          xmlns:trafo="http://midpoint.evolveum.com/xml/ns/story/trafo/ext"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<name>Dummy AD</name>
	<connectorRef type="c:ConnectorType">
		<filter>
			<q:and>
				<q:equal>
					<q:path>connectorType</q:path>
					<q:value>com.evolveum.icf.dummy.connector.DummyConnector</q:value>
				</q:equal>
				<q:equal>
					<q:path>connectorVersion</q:path>
					<q:value>2.0</q:value>
				</q:equal>
			</q:and>
		</filter>
	</connectorRef>
	<connectorConfiguration xmlns:icfi="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/bundle/com.evolveum.icf.dummy/com.evolveum.icf.dummy.connector.DummyConnector"
	               xmlns:icfc="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/connector-schema-3">
					   
		<icfc:configurationProperties>
			<icfi:instanceId>AD</icfi:instanceId>
			<icfi:caseIgnoreId>true</icfi:caseIgnoreId>
			<icfi:uidMode>uuid</icfi:uidMode>
		</icfc:configurationProperties>
		
		<icfc:resultsHandlerConfiguration>
 			<icfc:enableFilteredResultsHandler>true</icfc:enableFilteredResultsHandler>  
 			<icfc:enableCaseInsensitiveFilter>true</icfc:enableCaseInsensitiveFilter> 
		</icfc:resultsHandlerConfiguration> 

	</connectorConfiguration>

	<schemaHandling>
		<objectType>
			<kind>account</kind>
			<intent>default</intent>
			<displayName>Default Account</displayName>
			<default>true</default>
			<objectClass>ri:AccountObjectClass</objectClass>
			<attribute>
					<ref>ri:givenName</ref> <!-- required attribute on AD -->
					<displayName>Given Name</displayName>
					<outbound>
						<source>
							<path>$user/givenName</path>
						</source>
					</outbound>
					<inbound>
						<strength>weak</strength>
						<target>
							<path>$user/givenName</path>
						</target>
					</inbound>
				</attribute>
				<attribute>
					<ref>ri:sn</ref>
					<displayName>Surname</displayName>
					<limitations>
						<minOccurs>0</minOccurs>
						<access>
							<read>true</read>
							<add>true</add>
							<modify>true</modify>
						</access>
					</limitations>

					<outbound>
						<source>
							<path>$user/familyName</path>
						</source>
					</outbound>
					<inbound>
						<strength>weak</strength>
						<target>
							<path>$user/familyName</path>
						</target>
					</inbound>
				</attribute>
				<attribute>
					<ref>ri:sAMAccountName</ref> <!-- required attribute on AD -->
					<displayName>Login name</displayName>
					<matchingRule>mr:stringIgnoreCase</matchingRule>
					<outbound>
						<source>
							<path>$user/name</path>
						</source>
						<source>
							<path>$user/employeeType</path>
						</source>
						<source>
							<path>$user/givenName</path>
						</source>
						<source>
							<path>$user/familyName</path>
						</source>
						<expression>
							<script>
								<code>
if (employeeType == 'T' || employeeType == 'R') basic.norm(basic.stringify(name))
else {
	tmpGivenNameInitial = basic.stringify(givenName)?.size() &gt; 0 ? (basic.stringify(givenName)).substring(0,1) : ''
	return basic.norm(tmpGivenNameInitial + basic.stringify(familyName))+iterationToken
}
</code>
							</script>
						</expression>
					</outbound>
					<inbound>
						<strength>weak</strength>
						<target>
							<path>$user/name</path>
						</target>
					</inbound>
				</attribute>
				<attribute>
					<ref>ri:userPrincipalName</ref> 
					<displayName>User principal name</displayName>
					<outbound>
						<source>
							<path>$user/name</path>
						</source>
						<source>
							<path>$user/employeeType</path>
						</source>
						<source>
							<path>$user/givenName</path>
						</source>
						<source>
							<path>$user/familyName</path>
						</source>
						<expression>
							<script>
								<code>
if (employeeType == 'T' || employeeType == 'R') basic.norm(basic.stringify(name)) + '@trafo.xx'
else {
	tmpGivenNameInitial = basic.stringify(givenName)?.size() &gt; 0 ? (basic.stringify(givenName)).substring(0,1) : ''
	return basic.norm(tmpGivenNameInitial + basic.stringify(familyName)) + iterationToken + '@trafo.xx'
}
</code>
							</script>
						</expression>
					</outbound>
				</attribute>

				<attribute>
					<ref>ri:groups</ref>
					<displayName>Groups</displayName>

					<limitations>
						<access>
							<read>true</read>
							<add>true</add>
							<modify>true</modify>
						</access>
					</limitations>
					<tolerant>true</tolerant>
					<matchingRule>mr:stringIgnoreCase</matchingRule>
					<outbound>
						<strength>strong</strength><!-- See above -->
						<source>
							<path>$user/employeeType</path>
						</source>
						<source>
							<name>locality</name>
							<path>$user/locality</path>
						</source>
						<expression>
							<script>
								<code>
if ((basic.stringify(employeeType) == 'T' || basic.stringify(employeeType) == 'R'))
{
	tmpGrpCn = ''
	switch (basic.stringify(locality)) {
		case 'Bratislava':
			tmpGrpCn = 'CN=BA'
			break
		case 'Banská Bystrica':
			tmpGrpCn = 'CN=BB'
			break
		case 'Košice':
			tmpGrpCn = 'CN=KE'
			break
	}
	if (tmpGrpCn != '') return tmpGrpCn + ',OU=Groups,O=Trafo'
}
return null;

</code>
							</script>
						</expression>
					</outbound>
				</attribute>
				<attribute>
					<ref>icfs:name</ref>
					<displayName>Distinguished Name</displayName>

					<limitations>
						<access>
							<read>true</read>
							<add>true</add>
							<modify>true</modify>
						</access>
					</limitations>

					<matchingRule>mr:stringIgnoreCase</matchingRule>
					<outbound>
						<!--<strength>weak</strength>-->
						<source>
							<path>$user/givenName</path>
						</source>
						<source>
							<path>$user/familyName</path>
						</source>
						<source>
							<path>$user/employeeType</path>
						</source>
						<expression>
							<script>
								<code>
'CN=' + familyName + ' ' + givenName + iterationToken + ',OU=People,O=Trafo'
</code>
							</script>
						</expression>
					</outbound>
				</attribute>
				<attribute>
					<ref>ri:mail</ref>
					<outbound>
						<source>
							<path>$user/emailAddress</path>
						</source>
					</outbound>
				</attribute>
				<attribute>
					<ref>ri:userSharedFolderOther</ref>
					<outbound>
						<source>
							<path>$user/familyName</path>
						</source>
						<source>
							<path>$user/name</path>
						</source>
						<source>
							<path>$user/employeeType</path>
						</source>
						<expression>
							<script>
								<code>
if (basic.stringify(employeeType) == 'T' || basic.stringify(employeeType) == 'R')
	'\\\\medusa\\User\\' + basic.stringify(familyName) + '_' + name
								</code>
							</script>
						</expression>
					</outbound>
					<inbound>
						<tolerant>true</tolerant>
						<target>
							<path>$user/extension/trafo:homedir</path>
						</target>
					</inbound>
				</attribute>
				<attribute>
					<ref>ri:telephoneNumber</ref>
					<outbound>
						<source>
							<path>$user/telephoneNumber</path>
						</source>
					</outbound>
					<inbound>
						<strength>weak</strength>
						<target>
							<path>$user/telephoneNumber</path>
						</target>
					</inbound>
				</attribute>
				<attribute>
					<ref>ri:physicalDeliveryOfficeName</ref>
					<outbound>
						<source>
							<path>$user/locality</path>
						</source>
					</outbound>
					<inbound>
						<strength>weak</strength>
						<target>
							<path>$user/locality</path>
						</target>
					</inbound>
				</attribute>
<!-- 				<attribute> -->
<!-- 					<ref>ri:description</ref> -->
<!-- 					<outbound> -->
<!-- 						<source> -->
<!-- 							<path>$user/title</path> -->
<!-- 						</source> -->
<!-- 						<source> -->
<!-- 							<path>extension/trafo:uid</path> -->
<!-- 							<name>extensionUid</name> -->
<!-- 						</source> -->
<!-- 						<expression> -->
<!-- 							<script> -->
<!-- 								<code>extensionUid</code> -->
<!-- 							</script> -->
<!-- 						</expression> -->
<!-- 					</outbound> -->
<!-- 					<inbound> -->
<!-- 						<strength>weak</strength> -->
<!-- 						<target> -->
<!-- 							<path>$user/title</path> -->
<!-- 						</target> -->
<!-- 					</inbound> -->
<!-- 				</attribute> -->
				<!-- This attribute must be set to
other than "false". We will set it to "true" to expire the password
immediately (after create). Note there is no "initial" attribute, because the
current implementation of forms would set the icfs:passwordExpired = false by
default, which is not what we want. But it works, because it is set to "true"
on the create, and on the update of other attributes, this attribute is not
changed, so this outbound will not be processed.
Please note that AD itself does not support changing the icfs:passwordExpired
to "false". The only way of resetting the flag is to change user's password.
-->
<!-- 				<attribute>
					<ref>icfs:passwordExpired</ref>
					<outbound>
						<expression>
							<value>true</value>
						</expression>
					</outbound>
				</attribute>  -->

				<attribute>
					<ref>ri:accountExpires</ref>
					<outbound>
						<source>
							<name>validTo</name>
							<path>$user/activation/validTo</path>
						</source>
						<expression>
							<script>
								<code>
tmp = com.evolveum.midpoint.util.MiscUtil.asDate(validTo)?.getTime()
tmp + 11644473600000
								</code>
							</script>
						</expression>
						<condition>
							<script>
								<code>
validTo != null
								</code>
							</script>
						</condition>
					</outbound>
				</attribute>
  <dependency>
            <resourceRef oid="14400000-0000-0000-0000-000000000001">
<!-- Depends on Mail resource to push generated/changed email to AD through
midPoint -->
            </resourceRef>
            <strictness>relaxed</strictness>
             <order>10</order>
<!--              <forceLoad>true</forceLoad> -->
         </dependency>
		<iteration>
			<maxIterations>10</maxIterations>
				<tokenExpression>
					<script>
						<code>
							if (iteration == 0) {
								return "";
							} else {
								return ""+(iteration+1);
<!-- First user with iterator will use "2"; number automagically converted to
string -->
							}
						</code>
					</script>
				</tokenExpression>
				<postIterationCondition>
<!-- 'E', 'D' and 'S' accounts use the same naming convention: flastname -->
					<variable>
						<name>login</name>
						<path>$shadow/attributes/ri:sAMAccountName</path>
					</variable>
					<script>
						<code>
if (login == null) {
	return true
}
return midpoint.isUniqueAccountValue(resource, shadow, 'sAMAccountName', login)
						</code>
					</script>
				</postIterationCondition>
			</iteration>
<!-- cat accounts-2013-11-08-13-34-31.xml | grep icfs:name | sed 's/ xmlns:icfs="http:\/\/midpoint.evolveum.com\/xml\/ns\/public\/connector\/icf-1\/resource-schema-2">/>/' | sed 's/ \+//'|grep -v -i ou=ps | grep -v -i ou=ext | sed 's/\(.*\)/<protected>\n\1\n<\/protected>/' -->
		<protected>
                <icfs:name>CN=Administrator,CN=Users,O=Trafo</icfs:name>
            </protected>
            
            <activation>
                <existence>
                    <outbound>
<strength>weak</strength>
                        <expression>
                            <path>$focusExists</path>
                        </expression>
                    </outbound>
                    <outbound>
                      <name>Delayed delete after account is unassigned and account is disabled</name>
                      <timeFrom>
                        <referenceTime>
                          <path>$shadow/activation/disableTimestamp</path>
                        </referenceTime>
                        <offset>P1D</offset>
                      </timeFrom>
                      <source>
                        <path>$shadow/activation/administrativeStatus</path>
                      </source>
                      <source>
                        <path>$shadow/activation/disableReason</path>
                      </source>
                      <expression>
                        <value>false</value>
                      </expression>
                      <condition>
                        <script>
                          <code>
				import com.evolveum.midpoint.xml.ns._public.common.common_3.ActivationStatusType;
				import com.evolveum.midpoint.schema.constants.SchemaConstants;
				// do not delete explicitly disabled accounts
				administrativeStatus == ActivationStatusType.DISABLED &amp;&amp; 
				(disableReason == SchemaConstants.MODEL_DISABLE_REASON_DEPROVISION) // || disableReason == SchemaConstants.MODEL_DISABLE_REASON_MAPPED);
                          </code>
                         </script>
                       </condition>
                     </outbound>
                </existence>
                <administrativeStatus>
                    <outbound>
                        <expression>
                            <script>
                                <code>
                                    import com.evolveum.midpoint.xml.ns._public.common.common_3.ActivationStatusType;
                                    if (legal) {
                                        input;
                                    } else {
                                        ActivationStatusType.DISABLED;
                                    }
                                </code>
                            </script>
                        </expression>
                    </outbound>
                    <inbound>
                        <strength>weak</strength>
                    </inbound>
                </administrativeStatus>
            </activation>
                    
                <credentials>
                    <password>
                        <outbound>
<!-- FIXME Initial seed: The password is sent to AD only when changing from GUI -->
<!-- FIXME Production: remove channel restriction below AND remove inbound for credentials !!! -->
                            <!--<channel>http://midpoint.evolveum.com/xml/ns/public/gui/channels-3#user</channel>-->
			</outbound>
                        <inbound>
                            <strength>weak</strength>
                            <expression>
                                <generate/>
                            </expression>
                        </inbound>
			<!--<passwordPolicyRef oid="81818181-76e0-59e2-8888-3d4f02d3ffff" type="c:ValuePolicyType"/>-->
                    </password>
                </credentials>
            
		</objectType>
		
	</schemaHandling>

        <synchronization>
        	<objectSynchronization>
	            <enabled>true</enabled>
	
	            <correlation>
		            <q:equal>
					<q:matching>polyStringNorm</q:matching>
					<q:path>c:name</q:path>
					<expression>
						<description>Matches using sAMAccountName for R|T users (sAMAccountName =~ ps\d\d\d\d) or sAMAccountNAme for E users (sAMAccountName =~ jsmith)</description>
						<path>$account/attributes/ri:sAMAccountName</path>
					</expression>
					</q:equal>
					<condition>
						<script>
							<code>
		sAMAccountNameRegExp = /(?i)^ps\d\d\d\d$/
		tmpContainer = basic.getResourceIcfConfigurationPropertyValue(resource, 'Container')
		
		tmpContainer = '(?i)^CN=.*?,(OU=.*,)O=Trafo'
		dnRegExp2 = ~tmpContainer
		
		tmpName = basic.getAttributeValue(account, 'http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3', 'name')
		tmpLogin = basic.getAttributeValue(account, 'sAMAccountName')
		
		loginMatcher = (tmpLogin =~ sAMAccountNameRegExp)
		nameMatcher = (tmpName =~ dnRegExp2)
		return loginMatcher.matches() | nameMatcher.matches()
							</code>
						</script>
					</condition>
			
                    </correlation>
	
	            <reaction>
	                <situation>linked</situation>
	                <action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#modifyUser"/>
	            </reaction>
	            <reaction>
	                <situation>deleted</situation>
	                <action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#unlinkAccount"/>
	            </reaction>
	            <reaction>
	                <situation>unlinked</situation>
	                <action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#linkAccount"/>
	            </reaction>

	            <reaction>
	                <situation>unmatched</situation>
	                <!--<action ref="http://midpoint.evolveum.com/xml/ns/public/model/action-3#addUser">
				<objectTemplateRef oid="10000000-0000-0000-0000-a000fe000003"/>
	                </action>-->
	            </reaction>
			</objectSynchronization>
        </synchronization>

</resource>
