<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2010-2017 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<!--
Expects the following extension items:
 - attributeX, valueX (X = 1..9)
 - remediatorRef

Matches if (for any N) the value of 'attributeN' is equal to 'valueN'.

-->

<role xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
      xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
      xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
        oid="72d69ea9-dc0a-4769-b0a4-282f40226de2">
    <name>k11</name>
    <inducement>
        <policyRule>
            <policyConstraints>
                <objectState>
                    <expression>
                        <script>
                            <code>
                                rulesLib.execute('evaluateAttributeValuePairs', [
                                    object : object,
                                    ruleEvaluationContext : ruleEvaluationContext,
                                    assumeEquality : false
                                ])
                            </code>
                        </script>
                    </expression>
                </objectState>
            </policyConstraints>
            <policyActions>
                <enforcement>
                    <condition>
                        <script>
                            <code>
                                !rulesLib.execute('remediatorPresent', [ruleEvaluationContext : ruleEvaluationContext])
                            </code>
                        </script>
                    </condition>
                </enforcement>
                <approval>
                    <condition>
                        <script>
                            <code>
                                rulesLib.execute('remediatorPresent', [ruleEvaluationContext : ruleEvaluationContext])
                            </code>
                        </script>
                    </condition>
                    <approvalSchema>
                        <stage>
                            <approverExpression>
                                <script>
                                    <code>
                                        rulesLib.execute('computeApprovers', [
                                            approvalContext : approvalContext,
                                            stageDefinition : stageDefinition
                                        ])
                                    </code>
                                </script>
                            </approverExpression>
                        </stage>
                    </approvalSchema>
                </approval>
            </policyActions>
            <evaluationTarget>assignment</evaluationTarget>
        </policyRule>
        <order>2</order>
    </inducement>
</role>
