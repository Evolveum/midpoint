<!--
  ~ Copyright (c) 2010-2019 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->
<role
    xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
    xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
    xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
    xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3"
    xmlns:icfs="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3"
    xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
    xmlns:mr="http://prism.evolveum.com/xml/ns/public/matching-rule-3"
    oid="10000000-0000-0000-0000-000000006601">
    <name>role-meta-ldap</name>

    <description>
    creates two ldap objects for each assigend role:
    * virtual-static-group
    * groupOfURLs

    for induced users the role name ist just written to attribute description of user (description is multivalued)
    magic behind  virtual-static-group and groupOfURLs shows membership of user to group (see isMemberOf in user and uniqueMember in group)
    In real life application instead of description a custom attribute should do this job
    </description>

    <inducement>
        <construction>
            <resourceRef type="c:ResourceType">
                <filter xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3">
                    <q:equal>
                        <q:path>name</q:path>
                        <q:value>Embedded Test OpenDJ</q:value>
                    </q:equal>
                </filter>
            </resourceRef>
            <kind>entitlement</kind>
            <intent>virtualstatic</intent>
        </construction>
    </inducement>
    <inducement>
        <construction>
            <resourceRef type="c:ResourceType">
                <filter xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3">
                    <q:equal>
                        <q:path>name</q:path>
                        <q:value>Embedded Test OpenDJ</q:value>
                    </q:equal>
                </filter>
            </resourceRef>
            <kind>generic</kind>
            <intent>dynamic</intent>
        </construction>
    </inducement>
    <inducement>
        <construction>
            <resourceRef type="c:ResourceType">
                <filter xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3">
                    <q:equal>
                        <q:path>name</q:path>
                        <q:value>Embedded Test OpenDJ</q:value>
                    </q:equal>
                </filter>
            </resourceRef>
            <kind>account</kind>
            <intent>default</intent>
            <attribute>
                <ref>ri:description</ref>
                <outbound>
                    <strength>strong</strength>
                    <expression>
                        <script>
                            <!--
                                the proto-role can also be expressed as:
                                assignmentPath.getFirstOrderChain()[-1].getName()

                                assignmentPath.getFirstOrderChain(): the chain (hierarchy) of assignment/inducements
                                     as the "user" understands it. The metaroles are processed, so this pretends
                                     that there are no meta-roles and the high order inducement are placed
                                     directly in the roles in a plain role hierarchy.

                                assignmentPath.getFirstOrderChain()[-1]: last element of that chain. This
                                     means the role immediately before this inducement in the hierarchy. This is
                                     the role to which this meta-role "applies" to. I.e. the role that would
                                     contain this inducement in case that metaroles were not used.
                            -->
                            <code>
                                'dyngrp_' + assignmentPath.getProtoRole().getName()
                            </code>
                        </script>
                    </expression>
                </outbound>
            </attribute>
        </construction>
        <condition>
            <expression>
                <script>
                    <code>
                        (focus.getClass() == com.evolveum.midpoint.xml.ns._public.common.common_3.UserType.class)
                    </code>
                </script>
            </expression>
        </condition>
        <order>2</order>
    </inducement>
</role>
