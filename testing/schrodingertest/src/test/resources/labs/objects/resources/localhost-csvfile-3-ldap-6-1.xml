<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2019 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->
<c:objects xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
           xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:xsd="http://www.w3.org/2001/XMLSchema"
           xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
           xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3"
           xmlns:icfc="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/connector-schema-3">
    <c:resource oid="10000000-9999-9999-0000-a000ff000004">
        <c:name>CSV-3 (LDAP)</c:name>
        <connectorRef type="ConnectorType">
            <filter>
                <q:equal>
                    <q:path>c:connectorType</q:path>
                    <q:value>com.evolveum.polygon.connector.csv.CsvConnector</q:value>
                </q:equal>
            </filter>
        </connectorRef>
        <c:connectorConfiguration>
            <icfc:configurationProperties xmlns:icfcsv="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/bundle/com.evolveum.polygon.connector-csv/com.evolveum.polygon.connector.csv.CsvConnector">
                <icfcsv:filePath>/opt/training/midpoint-labs/flatfiles/csv-3.csv</icfcsv:filePath>
                <icfcsv:encoding>utf-8</icfcsv:encoding>
                <icfcsv:quoteMode>ALL</icfcsv:quoteMode>
                <icfcsv:quote>"</icfcsv:quote>
                <icfcsv:fieldDelimiter>,</icfcsv:fieldDelimiter>
                <icfcsv:multivalueDelimiter>;</icfcsv:multivalueDelimiter>
                <icfcsv:uniqueAttribute>dn</icfcsv:uniqueAttribute>
                <icfcsv:passwordAttribute>userPassword</icfcsv:passwordAttribute>
            </icfc:configurationProperties>
        </c:connectorConfiguration>
        <schemaHandling>
            <objectType>
                <kind>account</kind>
                <intent>default</intent>
                <displayName>Default Account</displayName>
                <default>true</default>
                <objectClass>ri:AccountObjectClass</objectClass>
                <attribute>
                    <ref>ri:dn</ref>
                    <displayName>Distinguished Name</displayName>
                    <limitations>
                        <minOccurs>0</minOccurs>
                    </limitations>
                    <outbound>
                        <!-- MID-101, LAB 8-1, part 1 of 2: Uncomment after custom schema is enabled -->
                        <!--
                        <strength>strong</strength>
                        <source>
                            <path>extension/ouPath</path>
                        </source>
-->
                        <!-- MID-101, LAB 8-1, part 1 of 2: end of comment -->
                        <source>
                            <path>givenName</path>
                        </source>
                        <source>
                            <path>familyName</path>
                        </source>
                        <expression>
                            <script>
                                <code>
                                    String[] tmpOuPath = []

                                    <!-- MID-101, LAB 8-1, part 2 of 2: Uncomment after custom schema is enabled -->
                                    <!-- tmpOuPath = ouPath ? ouPath.toString().split(':') : [] -->
                                    <!-- MID-101, LAB 8-1, part 2 of 2: end of comment -->
                                    tmpOuPathDn = ''

                                    for (i = 0; i &lt; tmpOuPath.size(); i++) {
                                    tmpOuPathDn = ',ou=' + tmpOuPath[i] + tmpOuPathDn
                                    }
                                    <!-- BONUS LAB, part 1 of 3: append: "+ iterationToken" (without quotes) after
                                    "cn" component of DN -->
                                    cn = basic.concatName(givenName, familyName)
                                    'cn=' + cn + tmpOuPathDn + ',ou=ExAmPLE,dc=example,dc=com'


                                </code>
                            </script>
                        </expression>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:employeeNumber</ref>
                    <displayName>Employee Number</displayName>
                    <description>Definition of Employee Number attribute handling.</description>
                    <outbound>
                        <source>
                            <path>employeeNumber</path>
                        </source>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:givenName</ref>
                    <displayName>First name</displayName>
                    <description>Definition of Firstname attribute handling.</description>
                    <outbound>
                        <source>
                            <path>givenName</path>
                        </source>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:sn</ref>
                    <displayName>Last name</displayName>
                    <description>Definition of Lastname attribute handling.</description>
                    <outbound>
                        <source>
                            <path>familyName</path>
                        </source>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:mail</ref>
                    <displayName>Mail</displayName>
                    <description>Definition of Mail attribute handling.</description>
                    <outbound>
                        <source>
                            <path>givenName</path>
                        </source>
                        <source>
                            <path>familyName</path>
                        </source>
                        <expression>
                            <script>
                                <code>
                                    <!-- BONUS LAB, part 2 of 3: append: "iterationToken + " (without quotes) just before '@example.com' part -->
                                    basic.norm(basic.stringify(givenName))?.replace(' ', '.') + '.' +
                                    basic.norm(basic.stringify(familyName))?.replace(' ', '.') + '@example.com'
                                </code>
                            </script>
                        </expression>
                    </outbound>
                    <inbound>
                        <target>
                            <path>emailAddress</path>
                        </target>
                    </inbound>
                </attribute>
                <attribute>
                    <ref>ri:MemberOf</ref>
                    <displayName>Member Of</displayName>
                    <description>Definition of MemberOf attribute handling.</description>
                    <limitations>
                        <minOccurs>0</minOccurs>
                        <maxOccurs>unbounded</maxOccurs>
                    </limitations>
                </attribute>
                <attribute>
                    <ref>ri:description</ref>
                    <displayName>Description</displayName>
                    <outbound>
                        <source>
                            <path>description</path>
                        </source>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:manager</ref>
                    <displayName>Manager</displayName>
                    <tolerant>false</tolerant>
                    <outbound>
                        <strength>strong</strength>
                        <expression>
                            <script>
                                <code>
                                    // get user managers from org. structure
                                    // (will not return anything unless we have org. structure...
                                    m = midpoint.getManagersOidsExceptUser(focus)
                                    // so we return empty value for that case
                                    if (m?.size() == 0) return ""
                                    // otherwise, get user login (name) instead of oid
                                    // (we need to take only first entry of manager list)
                                    manager = midpoint.getUserByOid(m.iterator().next())?.name
                                    return manager
                                </code>
                            </script>
                        </expression>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:telephoneNumber</ref>
                    <displayName>Telephone Number</displayName>
                    <description>Phone number normalized spaces</description>
                    <outbound>
                        <source>
                            <path>telephoneNumber</path>
                        </source>
                        <expression>
                            <script>
                                <code>basic.stringify(telephoneNumber)?.trim()?.replaceAll("( )+", " ")</code>
                            </script>
                        </expression>
                    </outbound>
                </attribute>
                <!-- BONUS LAB, part 3 of 3: uncomment the following section -->
                <!--
        <iteration>
            <maxIterations>10</maxIterations>

            <tokenExpression>
                <script>
                    <code>
if (iteration == 0)
    return ""
else return ""+(iteration+1)
                    </code>
                </script>
            </tokenExpression>

            <postIterationCondition>
                <variable>
                    <name>mail</name>
                    <path>$projection/attributes/ri:mail</path>
                </variable>
                <script>
                    <code>
if (mail == null) {
    return true
}
return midpoint.isUniqueAccountValue(resource, projection, 'mail', mail)
                    </code>
                </script>
            </postIterationCondition>
        </iteration>
 -->
                <!-- BONUS LAB, part 3 of 3: end of comment -->
                <protected>
                    <filter>
                        <q:equal>
                            <q:matching>http://prism.evolveum.com/xml/ns/public/matching-rule-3#stringIgnoreCase</q:matching>
                            <q:path>attributes/ri:dn</q:path>
                            <q:value>cn=administrator,ou=ExAmPLE,dc=example,dc=com</q:value>
                        </q:equal>
                    </filter>
                </protected>
                <protected>
                    <filter>
                        <q:equal>
                            <q:matching>http://prism.evolveum.com/xml/ns/public/matching-rule-3#stringIgnoreCase</q:matching>
                            <q:path>attributes/ri:dn</q:path>
                            <q:value>cn=mail-daemon,ou=ExAmPLE,dc=example,dc=com</q:value>
                        </q:equal>
                    </filter>
                </protected>
                <activation>
                <existence>
                    <outbound>
            <strength>weak</strength>
                        <expression>
                            <path>$focusExists</path>
                        </expression>
                    </outbound>
                </existence>
                    <administrativeStatus>
                        <outbound>
                        <expression>
                            <script>
                                <code>
                                    import com.evolveum.midpoint.xml.ns._public.common.common_3.ActivationStatusType;
                                    if (legal &amp;&amp; assigned) {
                                        input;
                                    } else {
                                        ActivationStatusType.DISABLED;
                                    }
                                </code>
                            </script>
                        </expression>
                        </outbound>
                    </administrativeStatus>
                </activation>
                <credentials>
                    <password>
                        <outbound/>
                        <!--<passwordPolicyRef oid="81818181-76e0-59e2-8888-3d4f02d3ffff" type="c:ValuePolicyType"/>-->
                    </password>
                </credentials>
            </objectType>
            <objectType>
        <kind>account</kind>
                <intent>admin</intent>

                <displayName>Admin Account</displayName>
                <default>false</default>

                <objectClass>ri:AccountObjectClass</objectClass>
                <attribute>
                    <ref>ri:dn</ref>
                    <displayName>Distinguished Name</displayName>

                    <limitations>
                        <minOccurs>0</minOccurs>
                    </limitations>
                    <outbound>
                        <source>
                            <path>givenName</path>
                        </source>
                        <source>
                            <path>familyName</path>
                        </source>
                        <expression>
                        <script>
                        <code>'cn=' + givenName + ' ' + familyName + iterationToken + ',ou=_Administrators_,ou=ExAmPLE,dc=example,dc=com'</code>
                        </script>
                        </expression>
                    </outbound>
                </attribute>

                <attribute>
                    <ref>ri:employeeNumber</ref>
                    <displayName>Employee Number</displayName>
                    <description>Definition of Employee Number attribute handling.</description>
                    <outbound>
                        <source>
                            <path>employeeNumber</path>
                        </source>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:givenName</ref>
                    <displayName>First name</displayName>
                    <description>Definition of Firstname attribute handling.</description>
                    <outbound>
                        <source>
                            <path>givenName</path>
                        </source>
                    </outbound>

                </attribute>
                <attribute>
                    <ref>ri:sn</ref>
                    <displayName>Last name</displayName>
                    <description>Definition of Lastname attribute handling.</description>
                    <outbound>
                        <source>
                            <path>familyName</path>
                        </source>
                    </outbound>
                </attribute>
                <attribute>
                    <ref>ri:MemberOf</ref>
                    <displayName>Member Of</displayName>
                    <description>Definition of MemberOf attribute handling.</description>
                    <limitations>
                      <minOccurs>0</minOccurs>
                      <maxOccurs>unbounded</maxOccurs>
                    </limitations>
                </attribute>

        <iteration>
            <maxIterations>10</maxIterations>

            <tokenExpression>
                <script>
                    <code>
if (iteration == 0)
    return ""
else return ""+(iteration+1)
                    </code>
                </script>
            </tokenExpression>

        </iteration>
                <protected>
                    <filter>
                        <q:equal>
                            <q:matching>http://prism.evolveum.com/xml/ns/public/matching-rule-3#stringIgnoreCase</q:matching>
                            <q:path>attributes/ri:dn</q:path>
                            <q:value>cn=admin2,ou=_Administrators_,ou=ExAmPLE,dc=example,dc=com</q:value>
                        </q:equal>
                    </filter>
                </protected>
                <protected>
                    <filter>
                        <q:equal>
                            <q:matching>http://prism.evolveum.com/xml/ns/public/matching-rule-3#stringIgnoreCase</q:matching>
                            <q:path>attributes/ri:dn</q:path>
                            <q:value>cn=admin3,ou=_Administrators_,ou=ExAmPLE,dc=example,dc=com</q:value>
                        </q:equal>
                    </filter>
                </protected>
                <activation>
                <administrativeStatus>
                    <outbound/>
                </administrativeStatus>
                </activation>

                <credentials>
                    <password>
                        <outbound>
                <expression>
                    <asIs/>
                </expression>
            </outbound>
                    </password>
                </credentials>
            </objectType>
        </schemaHandling>
        <capabilities xmlns:cap="http://midpoint.evolveum.com/xml/ns/public/resource/capabilities-3">
            <configured>
                <cap:activation>
                    <cap:status>
                        <cap:attribute>ri:disabled</cap:attribute>
                        <cap:enableValue>false</cap:enableValue>
                        <cap:disableValue>true</cap:disableValue>
                    </cap:status>
                </cap:activation>
                <cap:countObjects>
                    <cap:simulate>sequentialSearch</cap:simulate>
                </cap:countObjects>
            </configured>
        </capabilities>
        <synchronization>
            <objectSynchronization>
                <name>Default account</name>
                <description>Normal accounts are NOT in ou=_Administrators container</description>
                <kind>account</kind>
                <intent>default</intent>
                <enabled>true</enabled>
                <condition>
                    <script>
                        <code>
                            tmpSuffix = '(?i).*,ou=_Administrators_,ou=ExAmPLE,dc=example,dc=com$'
                            re = ~tmpSuffix
                            !(basic.getAttributeValue(projection, "dn") ==~ re)
                        </code>
                    </script>
                </condition>
                <correlation>
                    <q:description>
                        Correlation expression is a search query.
                        Following search queury will look for users that have "employeeNumber"
                        equal to the "employeeNumber" attribute of the account.
                        The condition will ensure that "employeeNumber" is not
                        empty, otherwise it would match any midPoint user
                        with empty "employeeNumber" attribute, such as "administrator".
                        The correlation rule always looks for users, so it will not match
                        any other object type.
                    </q:description>
                    <q:equal>
                        <q:path>c:employeeNumber</q:path>
                        <expression>
                            <path>$projection/attributes/ri:employeeNumber</path>
                        </expression>
                    </q:equal>
                    <condition>
                        <script>
                            <code>basic.getAttributeValue(projection, 'employeeNumber') != null</code>
                        </script>
                    </condition>
                </correlation>
                <reaction>
                    <situation>linked</situation>
                    <synchronize>true</synchronize>
                </reaction>
                <reaction>
                    <situation>deleted</situation>
                    <synchronize>true</synchronize>
                    <action>
                        <handlerUri>http://midpoint.evolveum.com/xml/ns/public/model/action-3#unlink</handlerUri>
                    </action>
                </reaction>
                <reaction>
                    <situation>unlinked</situation>
                    <synchronize>true</synchronize>
                    <action>
                        <handlerUri>http://midpoint.evolveum.com/xml/ns/public/model/action-3#link</handlerUri>
                    </action>
                </reaction>
                <reaction>
                    <situation>unmatched</situation>
                </reaction>
            </objectSynchronization>
            <objectSynchronization>
                    <name>Admin account</name>
                    <description>Admin accounts are in ou=_Administrators container</description>
                    <kind>account</kind>
                    <intent>admin</intent>
                <enabled>true</enabled>
                    <condition>
                        <script>
                            <code>
tmpSuffix = '(?i).*,ou=_Administrators_,ou=ExAmPLE,dc=example,dc=com$'
re = ~tmpSuffix
basic.getAttributeValue(projection, "dn") ==~ re
                            </code>
                        </script>
                    </condition>
                <correlation>
                    <q:description>
                        Correlation expression is a search query.
                        Following search queury will look for users that have "employeeNumber"
                        equal to the "employeeNumber" attribute of the account.
                            The condition will ensure that "employeeNumber" is not
                            empty, otherwise it would match any midPoint user
                            with empty "employeeNumber" attribute, such as "administrator".
                        The correlation rule always looks for users, so it will not match
                        any other object type.
                    </q:description>
                    <q:equal>
                        <q:path>c:employeeNumber</q:path>
                              <expression>
                                <path>$projection/attributes/ri:employeeNumber</path>
                              </expression>
                    </q:equal>
                        <condition>
                            <script>
                                <code>basic.getAttributeValue(projection, 'employeeNumber') != null</code>
                            </script>
                        </condition>
                </correlation>

                <reaction>
                    <situation>linked</situation>
                        <synchronize>true</synchronize>
                </reaction>
                <reaction>
                    <situation>deleted</situation>
                    <synchronize>true</synchronize>
                        <action>
                            <handlerUri>http://midpoint.evolveum.com/xml/ns/public/model/action-3#unlink</handlerUri>
                        </action>
                </reaction>
                <reaction>
                    <situation>unlinked</situation>
                    <synchronize>true</synchronize>
                        <action>
                            <handlerUri>http://midpoint.evolveum.com/xml/ns/public/model/action-3#link</handlerUri>
                        </action>
                </reaction>
                <reaction>
                    <situation>unmatched</situation>
                </reaction>
            </objectSynchronization>
        </synchronization>
    </c:resource>
</c:objects>
