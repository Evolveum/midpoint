/*
 * Copyright (C) 2010-2022 Evolveum and contributors
 *
 * This work is dual-licensed under the Apache License 2.0
 * and European Union Public License. See LICENSE file for details.
 */

podTemplate(
        nodeSelector: params.NODE_SELECTOR,
        activeDeadlineSeconds: 7200,
        idleMinutes: 1,
        workspaceVolume: dynamicPVC(requestsSize: "20Gi"),
        containers: [
                containerTemplate(name: 'jnlp',
                        image: 'jenkins/inbound-agent:4.13-2-alpine',
                        runAsUser: '0',
                        resourceLimitCpu: '900m',
                        resourceLimitMemory: '1Gi',
                        resourceRequestCpu: '900m',
                        resourceRequestMemory: '1Gi'),
                containerTemplate(name: 'postgres',
                        image: params.POSTGRES_IMAGE ?: 'postgres:13-alpine',
                        runAsUser: '0',
                        ttyEnabled: true,
                        resourceRequestCpu: '2',
                        resourceLimitCpu: '2',
                        resourceRequestMemory: '2Gi',
                        resourceLimitMemory: '2Gi',
                        envVars: [
                            envVar(key: 'POSTGRES_INITDB_ARGS', value: '--lc-collate=en_US.utf8 --lc-ctype=en_US.utf8'),
                            envVar(key: 'POSTGRES_USER', value: 'midtest'),
                            envVar(key: 'POSTGRES_PASSWORD', value: 'password'),
                            // TODO is separate mount for data necessary?
                        ],
                        ports: [portMapping(name: 'postgres', containerPort: 5432)]),
                containerTemplate(name: 'maven',
                        image: params.BUILDER_IMAGE ?: 'maven:3.8.5-openjdk-17',
                        runAsUser: '0',
                        ttyEnabled: true,
                        command: 'cat',
                        resourceLimitCpu: '4',
                        resourceLimitMemory: '8Gi')
        ]
) {
    node(POD_LABEL) {
        try {
            stage("checkout") {
                retry(3) {
                    git branch: "${BRANCH}",
                            url: 'https://github.com/Evolveum/midpoint.git'
                    echo "git checkout done..."
                }
            }
            stage("db-init") {
                container('postgres') {
                    if (!params.DB_UPGRADE_FROM_TAG) {
                        sh """#!/bin/bash -ex
                            psql --version
                            psql -v ON_ERROR_STOP=1 -q -U midtest -f config/sql/native/postgres.sql \
                                -f config/sql/native/postgres-audit.sql -f config/sql/native/postgres-quartz.sql
                            #psql -U midtest -c "\\dt" # uncomment to list the tables
                        """
                    } else {
                        // In the future, when the path changes, this may require either some logic, or make it part of the parameter.
                        // This expects upgrade from 4.4.4 github repository
                        sh """#!/bin/bash -ex
                            psql --version
                            wget https://raw.githubusercontent.com/Evolveum/midpoint/${params.DB_UPGRADE_FROM_TAG}/config/sql/native-new/postgres-new.sql
                            wget https://raw.githubusercontent.com/Evolveum/midpoint/${params.DB_UPGRADE_FROM_TAG}/config/sql/native-new/postgres-new-audit.sql
                            psql -v ON_ERROR_STOP=1 -q -U midtest -f postgres.sql \
                                -f postgres-audit.sql -f config/sql/native/postgres-quartz.sql

                            echo -e "\n*** UPGRADING DB ***\n"
                            psql -v ON_ERROR_STOP=1 -q -U midtest -f config/sql/native/postgres-upgrade.sql \
                                -f config/sql/native/postgres-upgrade-audit.sql
                            #psql -U midtest -c "\\dt" # uncomment to list the tables
                        """
                    }
                }
            }
            stage("build") {
                container('maven') {
                    sh """#!/bin/bash -ex
                        if [ '${VERBOSE}' = '1' ]
                        then
                            env | sort
                            mvn --version
                            df -h
                        fi

                        mvn -B -ntp clean install -DskipTests=true -P sqale,-dist

                        if [ '${VERBOSE}' = '1' ]
                        then
                            df -h
                        fi
                    """
                }
            }
            stage("conntest") {
                container('maven') {
                    sh """#!/bin/bash -ex
                        mvn -B -ntp -Dmaven.test.failure.ignore clean install -P sqale -DskipConnTests=false -pl testing/conntest \
                            -Dmidpoint.repository.jdbcUrl=jdbc:postgresql://localhost:5432/midtest

                        if [ '${VERBOSE}' = '1' ]
                        then
                            df -h
                        fi
                    """
                    currentBuild.result = 'SUCCESS'

                    step([$class: 'Publisher',
                        reportFilenamePattern: '**/testng-results.xml',
                        failureOnFailedTestConfig: true // TODO we don't want failure, but how can we make it unstable?
                    ])

                    if (currentBuild.result == 'UNSTABLE' || currentBuild.result == 'FAILURE' || params.ARCHIVE_LOGS) {
                        sh "tar --transform \"s-.*/--g\" -cvzf conntest-log.tgz testing/conntest/target/test.log"
	                    archiveArtifacts allowEmptyArchive: true, artifacts: "conntest-log.tgz", followSymlinks: false
                    }
                }
            }
        } catch (Exception e) {
            currentBuild.result = 'FAILURE' // error below will not set result for mailer!
            error 'Marking build as FAILURE because of: ' + e
        } finally {
            if (params.MAIL_NOTIFICATIONS) {
                try {
                    step([$class: 'Mailer',
                        notifyEveryUnstableBuild: true,
                        recipients: params.MAIL_RECIPIENT ?: env.DEFAULT_MAIL_RECIPIENT,
                        sendToIndividuals: false])

                    sh """#!/bin/bash -ex
                        if [ "${verbose}" -ge 1 ]; then
                            df -h
                        fi
                    """
                } catch (Exception e) {
                    println 'Could not send email: ' + e
                }
            }
        }
    }
}
