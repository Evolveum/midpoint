<!--
  ~ Copyright (C) 2010-2022 Evolveum and contributors
  ~
  ~ Licensed under the EUPL-1.2 or later.
  -->

<objectTemplate
        xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
        xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
        xmlns:ent="http://midpoint.evolveum.com/xml/ns/samples/enterprise"
        oid="c0d96ed0-bec7-4c6e-9a69-133b0301bdb8">
    <name>person</name>
    <iterationSpecification>
        <maxIterations>99</maxIterations>
    </iterationSpecification>
    <item>
        <ref>givenName</ref>
        <multiSource>
            <selection>
                <expression>
                    <!-- Just for the demonstration of an item-specific selection algorithm -->
                    <script>
                        <code>
                            import com.evolveum.midpoint.model.intest.TestIdentities
                            import com.evolveum.midpoint.xml.ns._public.common.common_3.UserType

                            if (identity == null) {
                                return null
                            }

                            // Appends the tag (if present) to the given name
                            // Just a demonstration of using item-specific mapping (and of stamping the value with its origin)

                            def values = midpoint.selectIdentityItemValues(identity, defaultAuthoritativeSource, UserType.F_GIVEN_NAME)
                            if (defaultAuthoritativeSource?.tag != null) {
                                values.collect() {
                                    midpoint.prismContext.itemFactory().createPropertyValue(
                                            basic.stringify(it.realValue) + " (" + defaultAuthoritativeSource.tag + ")"
                                    )
                                }
                            } else {
                                values
                            }
                        </code>
                    </script>
                </expression>
            </selection>
        </multiSource>
    </item>
    <item>
        <ref>familyName</ref>
        <multiSource/>
    </item>
    <item>
        <ref>c:extension/ent:personalNumber</ref> <!-- here are namespaces to see if the default mapping is created correctly -->
        <multiSource/>
    </item>
    <item>
        <ref>name</ref>
        <mapping>
            <source>
                <path>familyName</path>
            </source>
            <expression>
                <script>
                    <code>
                        basic.stringify(familyName).toLowerCase() + (iteration + 1)
                    </code>
                </script>
            </expression>
        </mapping>
    </item>
    <multiSource>
        <defaultAuthoritativeSource>
            <expression>
                <script>
                    <code>
                        import com.evolveum.midpoint.model.intest.TestIdentities
                        import com.evolveum.midpoint.schema.util.FocusIdentitySourceTypeUtil
                        import com.evolveum.midpoint.schema.util.FocusIdentityTypeUtil

                        // If there's an information from 'multi' source, we'll take it.
                        // Otherwise, we'll take the information from 'multi' that has
                        // the (alphabetically) lowest identifier.

                        if (identity == null) {
                            return null
                        }

                        def sources = identity
                                .collect { it.source }
                                .findAll { it != null }

                        def single = sources.find { it.resourceRef?.oid == TestIdentities.RESOURCE_SINGLE.oid }
                        def multi = sources
                                .findAll { it.resourceRef?.oid == TestIdentities.RESOURCE_MULTI.oid }

                        if (single != null) {
                            single
                        } else if (!multi.isEmpty()) {
                            multi.min { it.tag }
                        } else {
                            null
                        }
                    </code>
                </script>
            </expression>
        </defaultAuthoritativeSource>
    </multiSource>
</objectTemplate>
