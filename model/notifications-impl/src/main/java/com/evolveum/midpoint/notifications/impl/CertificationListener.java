/*
 * Copyright (c) 2010-2015 Evolveum and contributors
 *
 * This work is dual-licensed under the Apache License 2.0
 * and European Union Public License. See LICENSE file for details.
 */

package com.evolveum.midpoint.notifications.impl;

import com.evolveum.midpoint.certification.api.AccessCertificationEventListener;
import com.evolveum.midpoint.certification.api.CertificationManager;
import com.evolveum.midpoint.notifications.api.events.CertCampaignEvent;
import com.evolveum.midpoint.notifications.api.events.CertCampaignStageEvent;
import com.evolveum.midpoint.notifications.api.events.CertReviewEvent;
import com.evolveum.midpoint.notifications.impl.events.factory.CertEventFactory;
import com.evolveum.midpoint.notifications.impl.util.EventHelper;
import com.evolveum.midpoint.schema.result.OperationResult;
import com.evolveum.midpoint.task.api.Task;
import com.evolveum.midpoint.util.logging.Trace;
import com.evolveum.midpoint.util.logging.TraceManager;
import com.evolveum.midpoint.xml.ns._public.common.common_3.AccessCertificationCampaignType;
import com.evolveum.midpoint.xml.ns._public.common.common_3.AccessCertificationCaseType;
import com.evolveum.midpoint.xml.ns._public.common.common_3.ObjectReferenceType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.util.List;

/**
 * Converts events generated by certification module to notification events.
 */
@Component
public class CertificationListener implements AccessCertificationEventListener {

    private static final Trace LOGGER = TraceManager.getTrace(CertificationListener.class);

    // CertificationManager is not required, because e.g. within model-test and model-intest we have no certifications.
    // However, during normal operation, it is expected to be available.

    @Autowired(required = false) private CertificationManager certificationManager;
    @Autowired private CertEventFactory certEventFactory;
    @Autowired private EventHelper eventHelper;

    @PostConstruct
    public void init() {
        if (certificationManager != null) {
            certificationManager.registerCertificationEventListener(this);
        } else {
            LOGGER.warn("CertificationManager not present, notifications for certifications will not be enabled.");
        }
    }

    @Override
    public void onCampaignStart(AccessCertificationCampaignType campaign, Task task, OperationResult result) {
        CertCampaignEvent event = certEventFactory.createOnCampaignStartEvent(campaign, task);
        eventHelper.processEvent(event, task, result);
    }

    @Override
    public void onCampaignEnd(AccessCertificationCampaignType campaign, Task task, OperationResult result) {
        CertCampaignEvent event = certEventFactory.createOnCampaignEndEvent(campaign, task);
        eventHelper.processEvent(event, task, result);
    }

    @Override
    public void onCampaignStageStart(AccessCertificationCampaignType campaign, Task task, OperationResult result) {
        CertCampaignStageEvent event = certEventFactory.createOnCampaignStageStartEvent(campaign, task);
        eventHelper.processEvent(event, task, result);
    }

    @Override
    public void onCampaignStageDeadlineApproaching(AccessCertificationCampaignType campaign, Task task, OperationResult result) {
        CertCampaignStageEvent event = certEventFactory.createOnCampaignStageDeadlineApproachingEvent(campaign, task);
        eventHelper.processEvent(event, task, result);
    }

    @Override
    public void onCampaignStageEnd(AccessCertificationCampaignType campaign, Task task, OperationResult result) {
        CertCampaignStageEvent event = certEventFactory.createOnCampaignStageEndEvent(campaign, task);
        eventHelper.processEvent(event, task, result);
    }

    @Override
    public void onReviewRequested(ObjectReferenceType reviewerOrDeputyRef, ObjectReferenceType actualReviewerRef,
            List<AccessCertificationCaseType> cases, AccessCertificationCampaignType campaign, Task task, OperationResult result) {
        CertReviewEvent event = certEventFactory.createReviewRequestedEvent(reviewerOrDeputyRef, actualReviewerRef, cases, campaign, task);
        eventHelper.processEvent(event, task, result);
    }

    @Override
    public void onReviewDeadlineApproaching(ObjectReferenceType reviewerOrDeputyRef, ObjectReferenceType actualReviewerRef,
            List<AccessCertificationCaseType> cases, AccessCertificationCampaignType campaign, Task task, OperationResult result) {
        CertReviewEvent event = certEventFactory.createReviewDeadlineApproachingEvent(reviewerOrDeputyRef, actualReviewerRef, cases, campaign, task);
        eventHelper.processEvent(event, task, result);
    }
}
