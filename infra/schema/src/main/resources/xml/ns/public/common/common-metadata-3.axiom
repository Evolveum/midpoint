// Copyright (c) 2010-2025 Evolveum and contributors
//
// Licensed under the EUPL-1.2 or later.

prism:model common-metadata {

    namespace "http://midpoint.evolveum.com/xml/ns/public/common/common-3";
    version "3.0.0";

    import "http://midpoint.evolveum.com/xml/ns/public/common/prism" {
        prefix prism;
    }



    metadata CommonMetadata {
      prism:container storage {
        type StorageMetadataType;
        documentation """
          The details when data were stored in midPoint repository. It is about the creation
          (timestamp, originator user, channel, taskRef) and the last modification (the same).
        """;
        //operational true;
      }
      prism:container process {
        type ProcessMetadataType;
        documentation """
          The details how the data were processed by midPoint processes/tasks.
          Only present if it was approved or otherwise processed by a "process".
        """;
      }
      prism:container provisioning {
        type ProvisioningMetadataType;
      }
      prism:container transformation {
        type TransformationMetadataType;
      }
      prism:container provenance {
        type ProvenanceMetadataType;
      }
    }

    container StorageMetadataType {
      operational true;
      displayName "Storage Metadata";

      property createTimestamp {
        type DateTime; // FIXME: Should be xsd:dateTime or xsd:dateTimeStamp (which contains TZ info)
        documentation """
          The timestamp of data creation. It is set once and should never be changed.

          In case of "background" processes to create object (e.g. create with approval)
          this should be the timestamp when the process ended. I.e. the timestamp when
          the operation was executed.
        """;
        displayName "MetadataType.createTimestamp";
        operational true;
        indexed true;
        // since 3.5
      }

      reference creatorRef {
        targetType UserType;
        documentation "Reference to the user that created the data";
      }

      property createChannel {
        type Uri;
        documentation "Channel in which the object was created.";
        displayName "MetadataType.createChannel";
        operational true;
        indexed true;
      }

      reference createTaskRef {
        documentation "Reference to the task that created the object (if it was a persistent one).";
        targetType TaskType;
        displayName "MetadataType.createTaskRef";
        operational true;
      }
      property modifyTimestamp {
        type DateTime;
        documentation """
          The timestamp of last data modification. It should be updated to a current time
          when the object is modified.
          The modifications that change only operational attributes may not update the
          modify timestamp.
        """;
        displayName "MetadataType.modifyTimestamp";
        operational true;
        indexed true;
      }
      reference modifierRef {
        documentation "Reference to the user that modified the data";
        displayName "MetadataType.modifierRef";
        operational true;
        indexed true;
        targetType UserType;
      }
      property modifyChannel {
        type Uri;
        documentation "Chanel in whhich object was last modified.";
        operational true;
        indexed true;
      }
      reference modifyTaskRef {
        documentation """
          Reference to the task that last modified the object (if it was a persistent one).
          If the last modification was carried out by synchronous task, this reference will be empty.
        """;
        displayName "Metadata.modifyTaskRef";
        operational true;
        targetType TaskType;
      }
    }

    prism:container ProcessMetadataType {
      property requestTimestamp {
        type DateTime;
        documentation """
          The timestamp of "create" operation request. It is set once and should never be changed.

          In case of "background" processes to create object (e.g. create with approval)
          this should be the timestamp when the process started. I.e. the timestamp when
          the operation was requested.
        """;
        displayName "MetadataType.requestTimestamp";
        operational true;
      }
      reference requestorRef {
        documentation """
          Reference to the user that requested the "create" operation for this object or assignment.
        """;
        displayName "MetadataType.requestorComment";
        targetType UserType;
        operational true;
      }
      property requestorComment {
        type String;
        displayName "MetadataType.requestorComment";
        operational true;
      }

    }
    // FIXME: Convert additional metadata
    container ProvisioningMetadataType {
      operational true;
      displayName "Provisioning metadata";
      property lastProvisioningTimestamp {
        type DateTime;
        documentation """
          The timestamp last provisioning operation that was based on this object.
          E.g. the timestamp of last modification of any account based on the
          data from the user. This value is only updated if there was any
          real change in the resource.

          This meta-datum is used as an informational property that tells when
          the data were last synchronized in outbound direction. But it has another
          important role. It is used indirectly to trigger optimistic locking
          conflicts that are used to detect a "clean" recompute (i.e. recompute
          that is processing data without any outside interaction).
        """;
        displayName "MetadataType.lastProvisioningTimestamp";
        operational true;
      }
    }

    container TransformationMetadataType {
      displayName "Transformation Metadata";
      operational true;
      container mappingTransformation {
        type MappingTransformationType;
        documentation "Mapping transformation that led to the current value.";
        maxOccurs "unbounded";
      }
    }

    container MappingTransformationType {
      documentation "Informs that the value was provided by a mapping (and how exactly).";
      displayName "Transformation Metadata";
      operational true;
      container mappingSpecification {
        type MappingSpecificationType;
        documentation "Specification of the mapping.";
      }
      container source {
        type MappingSourceType;
        documentation "Sources for the mapping.";
        maxOccurs "unbounded";
      }
    }

    container MappingSourceType {
      property name {
        type String;
        documentation "Name of the mapping source.";
      }
      property value {
        type AnyType;
        documentation "Source value itself. (Along with its own metadata.)";
      }
    }

    container ProvenanceMetadataType {
      container acquisition {
        type ProvenanceAcquisitionType;
        maxOccurs "unbounded";
      }
      container mappingSpec {
        type MappingSpecificationType;
      }
    }

    container ProvenanceAcquisitionType {
      documentation """
        Ultimate origin of the data.
        This metadata structure represents the way how the data (or their components) entered the system.
        As data are processed by midPoint mechanisms (such as mappings), the acquisition metadata are preserved during the processing.
        Multiple values of acquisition data indicate that data from several sources were combined to create the result.
      """;
      property timestamp {
        type DateTime;
        operational true;
      }
      property channel {
        type String;
        operational true;
      }
      reference resourceRef {
        targetType ResourceType;
      }
      reference actorRef {
        operational true;
      }
      reference originRef {

      }
    }

    container MappingSpecificationType {
        property assignmentId {
            type String;
            // Temporary, should be replaced by assignment path later
        }
//        We cannot really have path now. We cannot express ordered lists.
//        container assignmentPath {
//            documentation "Assignment identifiers that specify the path that was used to evaluate the mapping."
//            type AssignmentIdentifierPath;
//        }
        reference definitionObjectRef {
            documentation "Object where the mapping is defined";
        }
        property mappingName {
            type String;
            documentation "Name of the mapping";
            minOccurs 1;
        }
    }

    container AssignmentIdentifierPathType {
        documentation """
            Path formed by assignment identifiers.
            It is often used to point to specific abstract role by referencing the identifiers (ids) of assignments/inducement that were traversed to evaluate the role.
        """;
        property id {
            // This needs to be ordered!
            type String;
            minOccurs "1";
            maxOccurs "unbounded";
        }
    }

}
