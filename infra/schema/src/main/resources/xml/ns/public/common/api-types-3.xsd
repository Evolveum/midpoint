<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2017 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/common/api-types-3"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/common/api-types-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:s="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            elementFormDefault="qualified"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            Schema that defines data types used in XML version of midPoint APIs.

            Version: 3.7
            Recommended namespace prefix: apit
        </xsd:documentation>
    </xsd:annotation>

    <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
                schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/common-3">
        <xsd:annotation>
            <xsd:documentation>
                Common midPoint schema.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3"
                schemaLocation="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3">
        <xsd:annotation>
            <xsd:documentation>
                Scripting language.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-3"
                schemaLocation="http://prism.evolveum.com/xml/ns/public/annotation-3">
        <xsd:annotation>
            <xsd:documentation>
                Common midPoint annotations used in various XSD schemas.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-3"
                schemaLocation="http://prism.evolveum.com/xml/ns/public/types-3">
        <xsd:annotation>
            <xsd:documentation>
                Prism data types.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:complexType name="ImportOptionsType">
        <xsd:annotation>
            <xsd:documentation>
                The options for import tasks. It specifies optional settings for import such as "overwrite" and "stop on
                error".
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="overwrite" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to a true value it will cause that objects that are already in the repository will be
                        overwritten by the imported objects.
                        It may not be applicable to all import types. E.g. it makes no sense for import from resource,
                        as this
                        is not storing objects in the repository directly.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="keepOid" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to a true value it will cause that objects that overwritten objects will reuse the same
                        OID
                        as previous objects.
                        May be potentially dangerous. USE WITH CARE.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="stopAfterErrors" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Number of errors that will cause import to stop. If set to one the import will stop on first
                        error.
                        If set to zero or negative value the import will not stop on any error.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="summarizeSucceses" type="xsd:boolean" minOccurs="0" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to true the successfully imported items will be summarized in the result.
                        WARNING: setting this to false may result in a very large result structure and may cause
                        overflow of
                        the system memory.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="summarizeErrors" type="xsd:boolean" minOccurs="0" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to true the import errors will be summarized in the result.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="referentialIntegrity" type="xsd:boolean" minOccurs="0" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="validateStaticSchema" type="xsd:boolean" minOccurs="0" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="validateDynamicSchema" type="xsd:boolean" minOccurs="0" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="encryptProtectedValues" type="xsd:boolean" minOccurs="0" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="fetchResourceSchema" type="xsd:boolean" minOccurs="0" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="keepMetadata" type="xsd:boolean" minOccurs="0" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to true then the importer will keep the metadata from the source file.
                        If set to false then the imported will re-generate metadata on each object.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="modelExecutionOptions" type="c:ModelExecuteOptionsType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        If present, these options are used for adding objects into the repository.
                        Null option values might be overridden by import-related options. In particular, the missing
                        "raw" option is overridden to "true". So, if you want the operation run in non-raw mode,
                        set "raw" option to "false".
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="compatMode" type="xsd:boolean" minOccurs="0" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        Compatibility model. If selected then the data parsing will be less strict.
                        E.g. removed element will be ingnored.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ObjectModificationType">
        <xsd:annotation>
            <xsd:documentation>
                Describes a change of attributes of a specific object.
                All changes are expected to happen atomically, but
                there may be exceptions. Please check with the
                documentation of the interface using this type for
                more details.

                   Used in the interfaces (modifyObject)
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="oid" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        OID of the object to modify.

                        Due to consistency reasons this should rather be
                        an attribute. But it is an element because of
                        OpenESB bug with attributes in message parts.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="itemDelta" type="t:ItemDeltaType" minOccurs="1" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Describe a change to a single attribute of an object.

                        TODO: this should be renamed to "itemModification"
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="objectModification" type="tns:ObjectModificationType"/>


    <xsd:complexType name="ObjectListType">
        <xsd:sequence>
            <xsd:element name="object" type="c:ObjectType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="count" type="xsd:int"/>
    </xsd:complexType>
    <xsd:element name="objectList" type="tns:ObjectListType"/>

    <xsd:complexType name="ResourceObjectShadowListType">
        <xsd:sequence>
            <xsd:element name="object" type="c:ShadowType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="UserListType">
        <xsd:sequence>
            <xsd:element name="user" type="c:UserType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

        <xsd:complexType name="ResourceObjectType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:any namespace="##other" minOccurs="1" maxOccurs="unbounded" processContents="lax">
                <xsd:annotation>
                    <xsd:appinfo>
                        <xjc:dom/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:any>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="ResourceObjectIdentificationType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:any namespace="##other" minOccurs="1" maxOccurs="unbounded" processContents="lax">
                <xsd:annotation>
                    <xsd:appinfo>
                        <xjc:dom/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:any>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="PropertyReferenceListType">
        <xsd:annotation>
            <xsd:documentation>
                DEPRECATED
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="property" type="t:ItemPathType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <!-- the following types are related to script execution; these are experimental for now -->
    <xsd:complexType name="XmlScriptsType">
        <xsd:sequence>
            <xsd:any minOccurs="0" maxOccurs="unbounded" />         <!-- objects substitutable with s:expression should be put here -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ExecuteScriptResponseType">
        <xsd:annotation>
            <xsd:documentation>
                Result of a single script execution.
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>3.6</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="output" type="s:ExecuteScriptOutputType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Data and console output of the execution of the script.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="result" type="c:OperationResultType">
                <xsd:annotation>
                    <xsd:documentation>
                        Operation result covering the execution of the script.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="executeScriptResponse" type="tns:ExecuteScriptResponseType"/>

    <xsd:complexType name="ScriptOutputsType">
        <xsd:sequence>
            <xsd:element name="output" type="tns:SingleScriptOutputType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="SingleScriptOutputType">
        <xsd:sequence>
            <xsd:choice>
                <xsd:element name="dataOutput" type="s:PipelineDataType" />
                <xsd:element name="mslData" type="xsd:string" />
            </xsd:choice>
            <xsd:element name="textOutput" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ExecuteScriptsOptionsType">
        <xsd:sequence>
            <xsd:element name="outputFormat" type="tns:OutputFormatType" minOccurs="0"/>
            <xsd:element name="objectLimit" type="xsd:int" minOccurs="0"/>
            <xsd:element name="executeAsynchronously" type="xsd:boolean" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name="OutputFormatType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="xml">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="XML"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="msl">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="MSL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="ObjectDeltaListType">
        <xsd:annotation>
            <xsd:documentation>
                List of object deltas.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="delta" type="t:ObjectDeltaType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ObjectDeltaOperationListType">
        <xsd:annotation>
            <xsd:documentation>
                List of object delta operations (deltas + operation results).
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="deltaOperation" type="c:ObjectDeltaOperationType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="CompareResultType">
        <xsd:annotation>
            <xsd:documentation>
                EXPERIMENTAL. TODO.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="currentToProvided" type="t:ObjectDeltaType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Delta that would change the current object (in midPoint) into the client-provided one.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="providedToCurrent" type="t:ObjectDeltaType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Delta that would change the client-provided object to the current object (in midPoint).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="normalizedObject" type="c:ObjectType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        "Normalized version" of provided object (i.e. the one that is created by parsing and re-serializing the object.)
                        Items to be ignored are left out from it.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="currentObject" type="c:ObjectType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Current version of object, as stored in midPoint.
                        Items to be ignored are left out from it.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="PolicyItemsDefinitionType">
        <xsd:annotation>
            <xsd:documentation>
                Defined items and rules for generating/validating values
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="policyItemDefinition" type="tns:PolicyItemDefinitionType" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Definition for the item to be generated/validated
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="policyItemsDefinition" type="tns:PolicyItemsDefinitionType"/>

    <xsd:complexType name="PolicyItemDefinitionType">
        <xsd:annotation>
            <xsd:documentation>

            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="target" type="tns:PolicyItemTargetType" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Definition of item for which the value will be generated/validated
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="valuePolicyRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Reference to the value policy that should be used to generate/validate the value.
                        If not specified, system defined policy is used
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>c:ValuePolicyType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="value" type="xsd:anyType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Contains either generated value or value which will be validated
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:rawType/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="execute" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Specifies if the generated value should be set immediately to the object.
                        Relevant only for generate operation.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="result" type="c:OperationResultType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Specifies if the generated value should be set immediately to the object.
                        Relevant only for generate operation.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>

        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="policyItemDefinition" type="tns:PolicyItemDefinitionType"/>

   <xsd:complexType name="PolicyItemTargetType">
        <xsd:annotation>
            <xsd:documentation>
                Defined items and rules for generating/validating values
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="path" type="t:ItemPathType" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Definition for the item to be generated/validated
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="policyItemTarget" type="tns:PolicyItemTargetType"/>


    <xsd:complexType name="ExecuteCredentialResetRequestType">
        <xsd:annotation>
            <xsd:documentation>
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="resetMethod" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="userEntry" type="xsd:string" minOccurs="0">
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="executeCredentialResetRequest" type="tns:ExecuteCredentialResetRequestType"/>

    <xsd:complexType name="ExecuteCredentialResetResponseType">
        <xsd:annotation>
            <xsd:documentation>
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="message" type="c:LocalizableMessageType" minOccurs="0">
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="executeCredentialResetResponse" type="tns:ExecuteCredentialResetResponseType"/>


    <xsd:complexType name="TerminateSessionEventType">
        <xsd:annotation>
            <xsd:documentation>
                Describe terminate session event cluster-wide. Strongly experimental.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:since>4.0</a:since>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="principal" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="terminateSessionEvent" type="tns:TerminateSessionEventType"/>

    <xsd:complexType name="UserSessionManagementListType">
        <xsd:annotation>
            <xsd:documentation>
                Describe list of sessions.

                Be aware: EXPERIMENTAL
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="session" type="tns:UserSessionManagementType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="sessionManagement" type="tns:UserSessionManagementListType"/>

    <xsd:complexType name="UserSessionManagementType">
        <xsd:annotation>
            <xsd:documentation>
                Describe session - user, active sessions, nodes where the user is active

                Be aware: EXPERIMENTAL
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="focus" type="c:FocusType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="activeSessions" type="xsd:int" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="node" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="userSessionManagement" type="tns:UserSessionManagementType"/>

</xsd:schema>

