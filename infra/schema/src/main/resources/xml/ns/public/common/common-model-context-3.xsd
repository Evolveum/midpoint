<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2017 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            elementFormDefault="qualified"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            TODO
        </xsd:documentation>
    </xsd:annotation>

    <!-- Don't provide schemaLocation here, as it causes xjc to really contact the URIs (!) -->
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-3"/>
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-3"/>

    <xsd:include schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/common-core-3" />

    <xsd:complexType name="LensContextType">
        <xsd:annotation>
            <xsd:documentation>
                A serialization of model context, i.e. a context of an operation in the model.
                In particular, this type is storing data for LensContext class.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="state" type="c:ModelStateType">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="channel" type="xsd:anyURI" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="focusContext" type="tns:LensFocusContextType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="projectionContext" type="tns:LensProjectionContextType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="focusClass" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="projectionClass" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="doReconciliationForAllProjections" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        True if we want to reconcile all accounts in this context.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="executionPhaseOnly" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to true then all operations are considered to be
						in execution phase - for the purpose of authorizations and auditing.
						This is used in case that the whole operation (context) is a
						secondary change, e.g. in case that persona is provisioned. 
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="projectionWave" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Current wave of computation and execution.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="executionWave" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Current wave of execution.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="options" type="c:ModelExecuteOptionsType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="lazyAuditRequest" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="requestAudited" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="executionAudited" type="xsd:boolean" minOccurs="0"/>
			<xsd:element name="requestAuthorized" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="stats" type="tns:LensContextStatsType" minOccurs="0"/>
            <xsd:element name="rottenExecutedDeltas" type="tns:LensObjectDeltaOperationType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="requestMetadata" type="tns:MetadataType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Metadata of the request. Metadata recorded when the operation has started.
						Currently only the requestTimestamp and requestorRef are meaningful. But
						later other metadata may be used.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>


    <xsd:complexType name="LensElementContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="objectOld" type="c:ObjectType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:objectReference>tns:objectOldRef</a:objectReference>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectOldRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectNew" type="c:ObjectType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:objectReference>tns:objectNewRef</a:objectReference>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectNewRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="primaryDelta" type="t:ObjectDeltaType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="secondaryDelta" type="t:ObjectDeltaType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="executedDeltas" type="tns:LensObjectDeltaOperationType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectTypeClass" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="oid" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="iteration" type="xsd:int" minOccurs="0">
               <xsd:annotation>
                   <xsd:documentation>
                       TODO
                   </xsd:documentation>
               </xsd:annotation>
           </xsd:element>
           <xsd:element name="iterationToken" type="xsd:string" minOccurs="0">
               <xsd:annotation>
                   <xsd:documentation>
                       TODO
                   </xsd:documentation>
               </xsd:annotation>
           </xsd:element>
           <xsd:element name="synchronizationIntent" type="c:SynchronizationIntentType" minOccurs="0">
               <xsd:annotation>
                   <xsd:documentation>
                       Initial intent regarding the account. It indicated what the initiator of the operation WANTS TO DO with the context.
                       If set to null then the decision is left to "the engine". Null is also a typical value
                       when the context is created. It may be pre-set under some circumstances, e.g. if an account is being unlinked.
                   </xsd:documentation>
               </xsd:annotation>
           </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="LensFocusContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:LensElementContextType">
                <xsd:sequence>
                    <xsd:element name="secondaryDeltas" type="tns:ObjectDeltaWavesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="lensFocusContext" type="tns:LensFocusContextType" />     <!-- seems to be necessary for PrismContainerDefinition for LFCT to be created -->

    <xsd:complexType name="LensProjectionContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:LensElementContextType">
                <xsd:sequence>
                    <xsd:element name="syncDelta" type="t:ObjectDeltaType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="syncAbsoluteTrigger" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="wave" type="xsd:int" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The wave in which this resource should be processed. Initial value of -1 means "undetermined".
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="resourceShadowDiscriminator" type="c:ShadowDiscriminatorType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Definition of account type.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="fullShadow" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isAssigned" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if the account is "legal" (assigned to the user). It may be false for accounts that are either
                                found to be illegal by live sync, were unassigned from user, etc.
                                If set to null the situation is not yet known. Null is a typical value when the context is constructed.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isAssignedOld" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                "Old" version of isAssigned.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isActive" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if the account should be part of the synchronization. E.g. outbound expression should be applied to it.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isLegal" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if there is a valid assignment for this projection and/or the policy allows such projection to exist.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isLegalOld" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if there is a valid assignment for this projection and/or the policy allows such projection to exist.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isExists" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="synchronizationPolicyDecision" type="c:SynchronizationPolicyDecisionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Decision regarding the account. It indicated what the engine has DECIDED TO DO with the context.
                                If set to null no decision was made yet. Null is also a typical value when the context is created.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="doReconciliation" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if we want to reconcile account in this context.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="synchronizationSituationDetected" type="c:SynchronizationSituationType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="synchronizationSituationResolved" type="c:SynchronizationSituationType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="accountPasswordPolicy" type="c:ValuePolicyType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:objectReference>tns:accountPasswordPolicyRef</a:objectReference>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="accountPasswordPolicyRef" type="c:ObjectReferenceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:objectReferenceTargetType>c:ValuePolicyType</a:objectReferenceTargetType>
                                <a:composite>true</a:composite>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="lensProjectionContext" type="tns:LensProjectionContextType" />     <!-- seems to be necessary for PrismContainerDefinition for LFCT to be created -->

    <xsd:complexType name="ObjectDeltaWavesType">
        <xsd:sequence>
            <xsd:element name="wave" type="tns:ObjectDeltaWaveType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="waveCount" type="xsd:int" />
    </xsd:complexType>

    <xsd:complexType name="ObjectDeltaWaveType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="delta" type="t:ObjectDeltaType"/>
        </xsd:sequence>
        <xsd:attribute name="number" type="xsd:int" />

    </xsd:complexType>

    <xsd:complexType name="LensObjectDeltaOperationType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="objectDeltaOperation" type="c:ObjectDeltaOperationType" />
            <xsd:element name="audited" type="xsd:boolean" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="modelContext" type="tns:LensContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:indexed>false</a:indexed>
                <a:minOccurs>0</a:minOccurs>
                <a:maxOccurs>1</a:maxOccurs>
            </xsd:appinfo>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="skipModelContextProcessing" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:minOccurs>0</a:minOccurs>
                <a:maxOccurs>1</a:maxOccurs>
            </xsd:appinfo>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:complexType name="LensContextStatsType">
    	<xsd:sequence>
    		<xsd:element name="requestTimestamp" type="xsd:dateTime" minOccurs="0"/>
    	</xsd:sequence>
    </xsd:complexType>

	<!-- IMPORTANT: when adding attributes here, update also PolicyRuleTypeUtil.triggerCollectionsEqual -->
    <xsd:complexType name="EvaluatedPolicyRuleTriggerType">
        <xsd:sequence>
            <xsd:element name="ref" type="xsd:int" minOccurs="0" />
            <xsd:element name="triggerId" type="xsd:int" minOccurs="0" />       <!-- not 'id' to avoid collisions with container identifiers -->
            <xsd:element name="ruleName" type="xsd:string" minOccurs="0" />
            <xsd:element name="constraintName" type="xsd:string" minOccurs="0" />
            <xsd:element name="constraintKind" type="tns:PolicyConstraintKindType" minOccurs="0" />
            <xsd:element name="constraint" type="tns:AbstractPolicyConstraintType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        DEPRECATED. DO NOT USE.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:deprecated>true</a:deprecated>
                        <a:deprecatedSince>3.7</a:deprecatedSince>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="message" type="tns:LocalizableMessageType" minOccurs="0" />
            <xsd:element name="shortMessage" type="tns:LocalizableMessageType" minOccurs="0" />
            <xsd:element name="presentationOrder" type="xsd:int" minOccurs="0" />
            <xsd:element name="final" type="xsd:boolean" minOccurs="0" />
            <xsd:element name="hidden" type="xsd:boolean" minOccurs="0" />
			<xsd:element name="assignmentPath" type="tns:AssignmentPathType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        DEPRECATED. Moved to EvaluatedPolicyRuleType. DO NOT USE.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:deprecated>true</a:deprecated>
                        <a:deprecatedSince>3.7</a:deprecatedSince>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
			<xsd:element name="directOwnerRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        DEPRECATED. Moved to EvaluatedPolicyRuleType. DO NOT USE.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:deprecated>true</a:deprecated>
                        <a:deprecatedSince>3.7</a:deprecatedSince>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="directOwnerDisplayName" type="t:PolyStringType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        DEPRECATED. Moved to EvaluatedPolicyRuleType. DO NOT USE.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:deprecated>true</a:deprecated>
                        <a:deprecatedSince>3.7</a:deprecatedSince>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
	<xsd:element name="evaluatedPolicyRuleTrigger" type="tns:EvaluatedPolicyRuleTriggerType" />

	<xsd:complexType name="EvaluatedStateTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedStateTrigger" type="tns:EvaluatedStateTriggerType" />

	<xsd:complexType name="EvaluatedHasAssignmentTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedHasAssignmentTrigger" type="tns:EvaluatedHasAssignmentTriggerType" />

	<xsd:complexType name="EvaluatedMultiplicityTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedMultiplicityTrigger" type="tns:EvaluatedMultiplicityTriggerType" />

	<xsd:complexType name="EvaluatedTimeValidityTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedTimeValidityTrigger" type="tns:EvaluatedTimeValidityTriggerType" />

	<xsd:complexType name="EvaluatedModificationTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedModificationTrigger" type="tns:EvaluatedModificationTriggerType" />

	<xsd:complexType name="EvaluatedEmbeddingTriggerType">  <!-- TODO name -->
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
                    <xsd:element name="embedded" type="tns:EvaluatedPolicyRuleTriggerType" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="EvaluatedTransitionTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedEmbeddingTriggerType">
				<xsd:sequence>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedTransitionTrigger" type="tns:EvaluatedTransitionTriggerType" />

	<xsd:complexType name="EvaluatedLogicalTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedEmbeddingTriggerType">
				<xsd:sequence>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedLogicalTrigger" type="tns:EvaluatedLogicalTriggerType" />

	<xsd:complexType name="EvaluatedExclusionTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
					<xsd:element name="conflictingObjectRef" type="c:ObjectReferenceType" minOccurs="0" />
					<xsd:element name="conflictingObjectDisplayName" type="t:PolyStringType" minOccurs="0" />
					<xsd:element name="conflictingObjectPath" type="tns:AssignmentPathType" minOccurs="0" />
					<xsd:element name="conflictingAssignment" type="tns:AssignmentType" minOccurs="0" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedExclusionTrigger" type="tns:EvaluatedExclusionTriggerType" />

	<!-- IMPORTANT: when adding attributes here, update also PolicyRuleTypeUtil.triggerCollectionsEqual -->
	<xsd:complexType name="EvaluatedSituationTriggerType">
		<xsd:complexContent>
			<xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
				<xsd:sequence>
					<xsd:element name="sourceRule" type="tns:EvaluatedPolicyRuleType" minOccurs="0" maxOccurs="unbounded" />	 <!-- TODO -->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="evaluatedSituationTrigger" type="tns:EvaluatedSituationTriggerType" />

	<xsd:complexType name="EvaluatedPolicyRuleType">
        <xsd:sequence>
            <!-- TODO use some kind of pointer here (otherwise it produces very long data e.g. in trigger info in assignments) -->
			<xsd:element name="policyRule" type="tns:PolicyRuleType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						DO NOT USE

						Keeping only because some "pre-3.6" code stored some data here. So we're not deleting
						it to avoid schema exceptions.
						Will be replaced by something more compact in the future (something like a reference to the rule).
					</xsd:documentation>
                    <xsd:appinfo>
                        <a:deprecated>true</a:deprecated>
                        <a:deprecatedSince>3.6</a:deprecatedSince>
                    </xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
            <xsd:element name="ruleName" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="assignmentPath" type="tns:AssignmentPathType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="directOwnerRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="directOwnerDisplayName" type="t:PolyStringType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="trigger" type="tns:EvaluatedPolicyRuleTriggerType" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="evaluatedPolicyRule" type="tns:EvaluatedPolicyRuleType" />

    <xsd:complexType name="AssignmentPathType">
        <xsd:sequence>
			<xsd:element name="segment" type="tns:AssignmentPathSegmentType" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
    </xsd:complexType>

	<xsd:complexType name="AssignmentPathSegmentType">
		<xsd:sequence>
			<xsd:element name="sourceRef" type="c:ObjectReferenceType" minOccurs="0" />
			<xsd:element name="sourceDisplayName" type="t:PolyStringType" minOccurs="0" />
			<xsd:element name="assignment" type="c:AssignmentType" minOccurs="0" />
			<xsd:element name="assignmentId" type="xsd:long" minOccurs="0" />
			<xsd:element name="targetRef" type="c:ObjectReferenceType" minOccurs="0" />
			<xsd:element name="targetDisplayName" type="t:PolyStringType" minOccurs="0" />
			<xsd:element name="matchingOrder" type="xsd:boolean" minOccurs="0" />
			<xsd:element name="isAssignment" type="xsd:boolean" minOccurs="0" />
			<!-- TODO maybe also evaluation order -->
		</xsd:sequence>
	</xsd:complexType>

</xsd:schema>
