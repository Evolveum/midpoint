<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2019 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
            xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            elementFormDefault="qualified"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            Schema for model context serialization as well as for the tracing feature.
        </xsd:documentation>
    </xsd:annotation>

    <!-- Don't provide schemaLocation here, as it causes xjc to really contact the URIs (!) -->
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-3"/>
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-3"/>
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/query-3"/>

    <xsd:include schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/common-core-3" />

    <xsd:complexType name="LensContextType">
        <xsd:annotation>
            <xsd:documentation>
                A serialization of model context, i.e. a context of an operation in the model.
                In particular, this type is storing data for LensContext class.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="requestIdentifier" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Unique identifier of a request (operation).
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>4.0</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="state" type="c:ModelStateType">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="channel" type="xsd:anyURI" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="focusContext" type="tns:LensFocusContextType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="projectionContext" type="tns:LensProjectionContextType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="focusClass" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="projectionClass" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="doReconciliationForAllProjections" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        True if we want to reconcile all accounts in this context.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="executionPhaseOnly" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to true then all operations are considered to be
                        in execution phase - for the purpose of authorizations and auditing.
                        This is used in case that the whole operation (context) is a
                        secondary change, e.g. in case that persona is provisioned.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="projectionWave" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Current wave of computation and execution.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="executionWave" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Current wave of execution.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="options" type="c:ModelExecuteOptionsType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="lazyAuditRequest" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="requestAudited" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="executionAudited" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="requestAuthorized" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="stats" type="tns:LensContextStatsType" minOccurs="0"/>
            <xsd:element name="rottenExecutedDeltas" type="tns:LensObjectDeltaOperationType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="requestMetadata" type="tns:MetadataType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Metadata of the request. Metadata recorded when the operation has started.
                        Currently only the requestTimestamp and requestorRef are meaningful. But
                        later other metadata may be used.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="ownerOid" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        OID of the context owner. This is currently used with personas.
                        This is the owner of a created or modified persona.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>


    <xsd:complexType name="LensElementContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="objectOld" type="c:ObjectType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:objectReference>tns:objectOldRef</a:objectReference>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectOldRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectCurrent" type="c:ObjectType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:objectReference>tns:objectCurrentRef</a:objectReference>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectCurrentRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectNew" type="c:ObjectType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:objectReference>tns:objectNewRef</a:objectReference>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectNewRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="primaryDelta" type="t:ObjectDeltaType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="secondaryDelta" type="t:ObjectDeltaType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="executedDeltas" type="tns:LensObjectDeltaOperationType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectTypeClass" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="oid" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="iteration" type="xsd:int" minOccurs="0">
               <xsd:annotation>
                   <xsd:documentation>
                       TODO
                   </xsd:documentation>
               </xsd:annotation>
           </xsd:element>
           <xsd:element name="iterationToken" type="xsd:string" minOccurs="0">
               <xsd:annotation>
                   <xsd:documentation>
                       TODO
                   </xsd:documentation>
               </xsd:annotation>
           </xsd:element>
           <xsd:element name="synchronizationIntent" type="c:SynchronizationIntentType" minOccurs="0">
               <xsd:annotation>
                   <xsd:documentation>
                       Initial intent regarding the account. It indicated what the initiator of the operation WANTS TO DO with the context.
                       If set to null then the decision is left to "the engine". Null is also a typical value
                       when the context is created. It may be pre-set under some circumstances, e.g. if an account is being unlinked.
                   </xsd:documentation>
               </xsd:annotation>
           </xsd:element>
            <xsd:element name="fresh" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        For diagnostics only. (Is not unwrapped.)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>

    <xsd:complexType name="LensFocusContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:LensElementContextType">
                <xsd:sequence>
                    <xsd:element name="secondaryDeltas" type="tns:ObjectDeltaWavesType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="lensFocusContext" type="tns:LensFocusContextType" />     <!-- seems to be necessary for PrismContainerDefinition for LFCT to be created -->

    <xsd:complexType name="LensProjectionContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:LensElementContextType">
                <xsd:sequence>
                    <xsd:element name="syncDelta" type="t:ObjectDeltaType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="syncAbsoluteTrigger" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="wave" type="xsd:int" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                The wave in which this resource should be processed. Initial value of -1 means "undetermined".
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="resourceShadowDiscriminator" type="c:ShadowDiscriminatorType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Definition of account type.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="fullShadow" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isAssigned" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if the account is "legal" (assigned to the user). It may be false for accounts that are either
                                found to be illegal by live sync, were unassigned from user, etc.
                                If set to null the situation is not yet known. Null is a typical value when the context is constructed.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isAssignedOld" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                "Old" version of isAssigned.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isActive" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if the account should be part of the synchronization. E.g. outbound expression should be applied to it.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isLegal" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if there is a valid assignment for this projection and/or the policy allows such projection to exist.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isLegalOld" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if there is a valid assignment for this projection and/or the policy allows such projection to exist.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="isExists" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="synchronizationPolicyDecision" type="c:SynchronizationPolicyDecisionType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Decision regarding the account. It indicated what the engine has DECIDED TO DO with the context.
                                If set to null no decision was made yet. Null is also a typical value when the context is created.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="doReconciliation" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                True if we want to reconcile account in this context.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="synchronizationSituationDetected" type="c:SynchronizationSituationType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="synchronizationSituationResolved" type="c:SynchronizationSituationType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="projectionSecurityPolicyRef" type="c:ObjectReferenceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:objectReferenceTargetType>c:SecurityPolicyType</a:objectReferenceTargetType>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="accountPasswordPolicy" type="c:ValuePolicyType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:objectReference>tns:accountPasswordPolicyRef</a:objectReference>
                                <a:deprecated>true</a:deprecated>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="accountPasswordPolicyRef" type="c:ObjectReferenceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:objectReferenceTargetType>c:ValuePolicyType</a:objectReferenceTargetType>
                                <a:deprecated>true</a:deprecated>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="lensProjectionContext" type="tns:LensProjectionContextType" />     <!-- seems to be necessary for PrismContainerDefinition for LFCT to be created -->

    <xsd:complexType name="ObjectDeltaWavesType">
        <xsd:sequence>
            <xsd:element name="wave" type="tns:ObjectDeltaWaveType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="waveCount" type="xsd:int" />
    </xsd:complexType>

    <xsd:complexType name="ObjectDeltaWaveType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="delta" type="t:ObjectDeltaType"/>
        </xsd:sequence>
        <xsd:attribute name="number" type="xsd:int" />

    </xsd:complexType>

    <xsd:complexType name="LensObjectDeltaOperationType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="objectDeltaOperation" type="c:ObjectDeltaOperationType" />
            <xsd:element name="audited" type="xsd:boolean" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="modelContext" type="tns:LensContextType">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:indexed>false</a:indexed>
                <a:minOccurs>0</a:minOccurs>
                <a:maxOccurs>1</a:maxOccurs>
            </xsd:appinfo>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="skipModelContextProcessing" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                TODO
            </xsd:documentation>
            <xsd:appinfo>
                <a:minOccurs>0</a:minOccurs>
                <a:maxOccurs>1</a:maxOccurs>
            </xsd:appinfo>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="LensContextStatsType">
        <xsd:sequence>
            <xsd:element name="requestTimestamp" type="xsd:dateTime" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <!-- IMPORTANT: when adding attributes here, update also PolicyRuleTypeUtil.triggerCollectionsEqual -->
    <xsd:complexType name="EvaluatedPolicyRuleTriggerType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:schemaMigration>
                    <a:element>tns:constraint</a:element>
                    <a:version>4.0</a:version>
                    <a:operation>removed</a:operation>
                </a:schemaMigration>
                <a:schemaMigration>
                    <a:element>tns:assignmentPath</a:element>
                    <a:version>4.0</a:version>
                    <a:operation>removed</a:operation>
                </a:schemaMigration>
                <a:schemaMigration>
                    <a:element>tns:directOwnerRef</a:element>
                    <a:version>4.0</a:version>
                    <a:operation>removed</a:operation>
                </a:schemaMigration>
                <a:schemaMigration>
                    <a:element>tns:directOwnerDisplayName</a:element>
                    <a:version>4.0</a:version>
                    <a:operation>removed</a:operation>
                </a:schemaMigration>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="ref" type="xsd:int" minOccurs="0" />
            <xsd:element name="triggerId" type="xsd:int" minOccurs="0" />       <!-- not 'id' to avoid collisions with container identifiers -->
            <xsd:element name="ruleName" type="xsd:string" minOccurs="0" />
            <xsd:element name="constraintName" type="xsd:string" minOccurs="0" />
            <xsd:element name="constraintKind" type="tns:PolicyConstraintKindType" minOccurs="0" />
            <xsd:element name="message" type="tns:LocalizableMessageType" minOccurs="0" />
            <xsd:element name="shortMessage" type="tns:LocalizableMessageType" minOccurs="0" />
            <xsd:element name="presentationOrder" type="xsd:int" minOccurs="0" />
            <xsd:element name="final" type="xsd:boolean" minOccurs="0" />
            <xsd:element name="hidden" type="xsd:boolean" minOccurs="0" />
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="evaluatedPolicyRuleTrigger" type="tns:EvaluatedPolicyRuleTriggerType" />

    <xsd:complexType name="EvaluatedStateTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedStateTrigger" type="tns:EvaluatedStateTriggerType" />

    <xsd:complexType name="EvaluatedHasAssignmentTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedHasAssignmentTrigger" type="tns:EvaluatedHasAssignmentTriggerType" />

    <xsd:complexType name="EvaluatedMultiplicityTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedMultiplicityTrigger" type="tns:EvaluatedMultiplicityTriggerType" />

    <xsd:complexType name="EvaluatedTimeValidityTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedTimeValidityTrigger" type="tns:EvaluatedTimeValidityTriggerType" />

    <xsd:complexType name="EvaluatedModificationTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedModificationTrigger" type="tns:EvaluatedModificationTriggerType" />

    <xsd:complexType name="EvaluatedEmbeddingTriggerType">  <!-- TODO name -->
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                    <xsd:element name="embedded" type="tns:EvaluatedPolicyRuleTriggerType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="EvaluatedTransitionTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedEmbeddingTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedTransitionTrigger" type="tns:EvaluatedTransitionTriggerType" />

    <xsd:complexType name="EvaluatedLogicalTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedEmbeddingTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedLogicalTrigger" type="tns:EvaluatedLogicalTriggerType" />

    <xsd:complexType name="EvaluatedExclusionTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                    <xsd:element name="conflictingObjectRef" type="c:ObjectReferenceType" minOccurs="0" />
                    <xsd:element name="conflictingObjectDisplayName" type="t:PolyStringType" minOccurs="0" />
                    <xsd:element name="conflictingObjectPath" type="tns:AssignmentPathType" minOccurs="0" />
                    <xsd:element name="conflictingAssignment" type="tns:AssignmentType" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedExclusionTrigger" type="tns:EvaluatedExclusionTriggerType" />

    <!-- IMPORTANT: when adding attributes here, update also PolicyRuleTypeUtil.triggerCollectionsEqual -->
    <xsd:complexType name="EvaluatedSituationTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                    <xsd:element name="sourceRule" type="tns:EvaluatedPolicyRuleType" minOccurs="0" maxOccurs="unbounded" />     <!-- TODO -->
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedSituationTrigger" type="tns:EvaluatedSituationTriggerType" />

    <xsd:complexType name="EvaluatedCollectionStatsTriggerType">
        <xsd:complexContent>
            <xsd:extension base="tns:EvaluatedPolicyRuleTriggerType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="evaluatedCollectionStatsTrigger" type="tns:EvaluatedCollectionStatsTriggerType" />

    <xsd:complexType name="EvaluatedPolicyRuleType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:schemaMigration>
                    <a:element>tns:policyRule</a:element>
                    <a:version>4.0</a:version>
                    <a:operation>removed</a:operation>
                </a:schemaMigration>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <!-- TODO use some kind of pointer here (otherwise it produces very long data e.g. in trigger info in assignments) -->
            <xsd:element name="ruleName" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="assignmentPath" type="tns:AssignmentPathType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="directOwnerRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="directOwnerDisplayName" type="t:PolyStringType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        TODO
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="trigger" type="tns:EvaluatedPolicyRuleTriggerType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="evaluatedPolicyRule" type="tns:EvaluatedPolicyRuleType" />

    <xsd:complexType name="AssignmentPathType">
        <xsd:sequence>
            <xsd:element name="segment" type="tns:AssignmentPathSegmentType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="AssignmentPathSegmentType">
        <xsd:sequence>
            <xsd:element name="sourceRef" type="c:ObjectReferenceType" minOccurs="0" />
            <xsd:element name="sourceDisplayName" type="t:PolyStringType" minOccurs="0" />
            <xsd:element name="assignment" type="c:AssignmentType" minOccurs="0" />
            <xsd:element name="assignmentId" type="xsd:long" minOccurs="0" />
            <xsd:element name="targetRef" type="c:ObjectReferenceType" minOccurs="0" />
            <xsd:element name="targetDisplayName" type="t:PolyStringType" minOccurs="0" />
            <xsd:element name="matchingOrder" type="xsd:boolean" minOccurs="0" />
            <xsd:element name="isAssignment" type="xsd:boolean" minOccurs="0" />
            <!-- TODO maybe also evaluation order -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="TraceType">
        <xsd:annotation>
            <xsd:documentation>
                Root type for tracing information that is embedded in OperationResult objects.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="text" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Unstructured text information to be used when existing structure is not sufficient.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="trace" type="tns:TraceType" />

    <xsd:complexType name="ClockworkTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Abstract trace for clockwork events. It contains outputLensContext but usually only minimal information
                is there (e.g. state and waves).
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="inputLensContext" type="tns:LensContextType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Lens (model) context at input.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="outputLensContext" type="tns:LensContextType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Lens (model) context at output.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="inputLensContextText" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Lens (model) context at input (text dump).
                            </xsd:documentation>
                            <xsd:appinfo>
                                <a:since>4.0.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="outputLensContextText" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Lens (model) context at output (text dump).
                            </xsd:documentation>
                            <xsd:appinfo>
                                <a:since>4.0.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="clockworkTraceType" type="tns:ClockworkTraceType" />

    <xsd:complexType name="ClockworkRunTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for Clockwork.run operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ClockworkTraceType">
                <xsd:sequence>
                    <xsd:element name="focusName" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Focus name (at output).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="clockworkRunTrace" type="tns:ClockworkRunTraceType" />

    <xsd:complexType name="ClockworkClickTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for Clockwork.click operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ClockworkTraceType">
                <xsd:sequence>
                    <!-- temporary - for backwards compatibility only -->
                    <xsd:element name="state" type="tns:ModelStateType" minOccurs="0"/>
                    <xsd:element name="projectionWave" type="xsd:int" minOccurs="0"/>
                    <xsd:element name="executionWave" type="xsd:int" minOccurs="0"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="clockworkClickTrace" type="tns:ClockworkClickTraceType" />

    <xsd:complexType name="ProjectorRunTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for Projector.project operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ClockworkTraceType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="projectorRunTrace" type="tns:ProjectorRunTraceType" />

    <xsd:complexType name="ProjectorComponentTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for Projector component operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ClockworkTraceType">
                <xsd:sequence>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="projectorComponentTrace" type="tns:ProjectorComponentTraceType" />

    <xsd:complexType name="FocusLoadedTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Information about focus being loaded.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ClockworkTraceType">
                <xsd:sequence>
                    <xsd:element name="focusLoadedRef" type="c:ObjectReferenceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.1</a:since>
                                <a:composite>true</a:composite>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="focusLoadedTrace" type="tns:FocusLoadedTraceType" />

    <xsd:complexType name="FullShadowLoadedTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Information about full shadow being loaded.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:ClockworkTraceType">
                <xsd:sequence>
                    <xsd:element name="shadowLoadedRef" type="c:ObjectReferenceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.1</a:since>
                                <a:composite>true</a:composite>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="resourceName" type="t:PolyStringType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="fullShadowLoadedTrace" type="tns:FullShadowLoadedTraceType" />

    <xsd:complexType name="ModelExecuteDeltaTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for model's delta execution.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="delta" type="tns:LensObjectDeltaOperationType" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="modelExecuteDeltaTrace" type="tns:ModelExecuteDeltaTraceType" />

    <xsd:complexType name="ProvisioningOperationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for provisioning operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <!-- TODO -->
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="provisioningOperationTrace" type="tns:ProvisioningOperationTraceType" />

    <xsd:complexType name="RepositoryOperationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for repository operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="cache" type="xsd:boolean" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Is this at the RepositoryCache level?
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="cacheUse" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                How was the cache used?
                                DEPRECATED - remove!
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="globalCacheUse" type="tns:CacheUseTraceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                How was the cache used?
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="localCacheUse" type="tns:CacheUseTraceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                How was the cache used?
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositoryOperationTrace" type="tns:RepositoryOperationTraceType" />

    <xsd:complexType name="RepositoryAddTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for repository ADD operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositoryOperationTraceType">
                <xsd:sequence>
                    <xsd:element name="objectRef" type="c:ObjectReferenceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object to be added.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <a:composite>true</a:composite>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="options" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Options (stringified).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="oid" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                OID resulting from the operation.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositoryAddTrace" type="tns:RepositoryAddTraceType" />

    <xsd:complexType name="RepositoryModifyTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for repository MODIFY operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositoryOperationTraceType">
                <xsd:sequence>
                    <xsd:element name="objectType" type="xsd:QName" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object to be modified.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="oid" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                OID of the object to be modified.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="modification" type="t:ItemDeltaType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Delta(s) to be applied.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="options" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Options (stringified).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositoryModifyTrace" type="tns:RepositoryModifyTraceType" />

    <xsd:complexType name="RepositoryDeleteTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for repository DELETE operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositoryOperationTraceType">
                <xsd:sequence>
                    <xsd:element name="objectType" type="xsd:QName" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Type of the object to be deleted.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="oid" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                OID of the object to be deleted.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositoryDeleteTrace" type="tns:RepositoryDeleteTraceType" />

    <xsd:complexType name="RepositoryGetObjectTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for repository getObject operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositoryOperationTraceType">
                <xsd:sequence>
                    <xsd:element name="objectType" type="xsd:QName" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Type of the object to be deleted.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="oid" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                OID of the object to be deleted.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="options" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Options (stringified).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="objectRef" type="c:ObjectReferenceType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object that was retrieved.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <a:composite>true</a:composite>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositoryGetObjectTrace" type="tns:RepositoryGetObjectTraceType" />

    <xsd:complexType name="RepositoryGetTraceType">
        <xsd:annotation>
            <xsd:documentation>
                TEMPORARY - REMOVE
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositoryGetObjectTraceType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositoryGetTrace" type="tns:RepositoryGetTraceType" />

    <xsd:complexType name="RepositorySearchTraceType">
        <xsd:annotation>
            <xsd:documentation>
                TEMPORARY - REMOVE
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositorySearchObjectsTraceType">
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositorySearchTrace" type="tns:RepositorySearchTraceType" />

    <xsd:complexType name="RepositoryGetVersionTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for repository getVersion operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositoryOperationTraceType">
                <xsd:sequence>
                    <xsd:element name="objectType" type="xsd:QName" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Type of the object to be deleted.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="oid" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                OID of the object to be deleted.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="options" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Options (stringified).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="version" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object version that was retrieved.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositoryGetVersionTrace" type="tns:RepositoryGetVersionTraceType" />

    <xsd:complexType name="RepositorySearchObjectsTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for repository searchObjects/searchObjectsIterative operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:RepositoryOperationTraceType">
                <xsd:sequence>
                    <xsd:element name="objectType" type="xsd:QName" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Type of the objects to be searched for.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="query" type="q:QueryType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Object query.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="options" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Options (stringified).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="resultSize" type="xsd:int" minOccurs="0">
                        <xsd:annotation>
                            <xsd:documentation>
                                Number of objects found.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="objectRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                Objects that were retrieved.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <a:composite>true</a:composite>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="repositorySearchObjectsTrace" type="tns:RepositorySearchObjectsTraceType" />

    <xsd:complexType name="MappingEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for mapping evaluation operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="mappingKind" type="tns:MappingKindType" minOccurs="0"/>
                    <xsd:element name="mapping" type="tns:MappingType" minOccurs="0"/>
                    <xsd:element name="containingObjectRef" type="tns:ObjectReferenceType" minOccurs="0"/>
                    <xsd:element name="timeFrom" type="xsd:dateTime" minOccurs="0"/>
                    <xsd:element name="timeTo" type="xsd:dateTime" minOccurs="0"/>
                    <xsd:element name="nextRecomputeTime" type="xsd:dateTime" minOccurs="0"/>
                    <xsd:element name="timeConstraintValid" type="xsd:boolean" minOccurs="0"/>
                    <xsd:element name="conditionResultOld" type="xsd:boolean" minOccurs="0"/>
                    <xsd:element name="conditionResultNew" type="xsd:boolean" minOccurs="0"/>
                    <xsd:element name="implicitSourcePath" type="t:ItemPathType" minOccurs="0"/>
                    <xsd:element name="implicitTargetPath" type="t:ItemPathType" minOccurs="0"/>
                    <xsd:element name="source" type="tns:MappingSourceEvaluationTraceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.0.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="output" type="t:DeltaSetTripleType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.0.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="textTrace" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="mappingEvaluationTrace" type="tns:MappingEvaluationTraceType" />

    <xsd:complexType name="MappingSourceEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Information about mapping source during evaluation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="name" type="xsd:QName" minOccurs="0"/>
            <xsd:element name="itemDeltaItem" type="t:ItemDeltaItemType" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="mappingSourceEvaluationTrace" type="tns:MappingSourceEvaluationTraceType" />

    <xsd:simpleType name="MappingKindType">
        <xsd:annotation>
            <xsd:documentation>
                Kind of mapping.
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.0</a:since>
                <a:experimental>true</a:experimental>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="outbound">
                <xsd:annotation>
                    <xsd:documentation>
                        Resource outbound mapping.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="OUTBOUND"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="inbound">
                <xsd:annotation>
                    <xsd:documentation>
                        Resource inbound mapping.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="INBOUND"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="template">
                <xsd:annotation>
                    <xsd:documentation>
                        Object template mapping.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="TEMPLATE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="assigned">
                <xsd:annotation>
                    <xsd:documentation>
                        Assigned "focus mapping".
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ASSIGNED"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="autoAssign">
                <xsd:annotation>
                    <xsd:documentation>
                        Role auto-assign mapping.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="AUTO_ASSIGN"/>
                        <a:since>4.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="construction">
                <xsd:annotation>
                    <xsd:documentation>
                        Mapping used in a construction.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="CONSTRUCTION"/>
                        <a:since>4.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="policyRuleCondition">
                <xsd:annotation>
                    <xsd:documentation>
                        Condition for policy rule.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="POLICY_RULE_CONDITION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="assignmentCondition">
                <xsd:annotation>
                    <xsd:documentation>
                        Condition for assignment or inducement.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ASSIGNMENT_CONDITION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="condition">
                <xsd:annotation>
                    <xsd:documentation>
                        Other conditions.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="CONDITION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="other">
                <xsd:annotation>
                    <xsd:documentation>
                        Other kind of mapping. (To be specified later.)
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="OTHER"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="ValueTransformationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for transformation of a tuple of values.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="input" type="tns:NamedValueType" minOccurs="0" maxOccurs="unbounded" />
                    <xsd:element name="destination" type="t:PlusMinusZeroType" minOccurs="0" />
                    <xsd:element name="output" type="tns:AnyValueType" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="comment" type="xsd:string" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="valueTransformationTrace" type="tns:ValueTransformationTraceType" />

    <xsd:complexType name="ScriptEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for script evaluation operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="scriptExpressionEvaluator" type="tns:ScriptExpressionEvaluatorType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.0.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="variable" type="tns:ScriptVariableEvaluationTraceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.0.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="result" type="tns:AnyValueType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>4.0.1</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="scriptEvaluationTrace" type="tns:ScriptEvaluationTraceType" />

    <xsd:complexType name="ScriptVariableEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Information about script variable during evaluation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="name" type="xsd:QName" minOccurs="0"/>
            <xsd:element name="alias" type="xsd:QName" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="value" type="tns:AnyValueType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="scriptVariableEvaluationTrace" type="tns:ScriptVariableEvaluationTraceType" />

    <xsd:complexType name="AssignmentEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for assignment evaluation operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <!-- TODO: assignment ItemDeltaItem as a wrapping object -->
                    <xsd:element name="assignmentOld" type="c:AssignmentType"/>
                    <xsd:element name="assignmentDelta" type="t:ItemDeltaType"/>
                    <xsd:element name="assignmentNew" type="c:AssignmentType"/>
                    <xsd:element name="primaryAssignmentMode" type="t:PlusMinusZeroType"/>
                    <xsd:element name="evaluateOld" type="xsd:boolean"/>
                    <!-- TODO source as object -->
                    <xsd:element name="textSource" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="sourceDescription" type="xsd:string"/>
                    <!-- TODO machine-readable result -->
                    <xsd:element name="textResult" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="assignmentEvaluationTrace" type="tns:AssignmentEvaluationTraceType" />

    <xsd:complexType name="AssignmentSegmentEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for assignment evaluation operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="segment" type="tns:AssignmentPathSegmentType" minOccurs="0"/>
                    <xsd:element name="mode" type="t:PlusMinusZeroType" minOccurs="0"/>
                    <xsd:element name="textResult" type="xsd:string" minOccurs="0"/>
                    <!-- TODO result as object -->
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="assignmentSegmentEvaluationTrace" type="tns:AssignmentSegmentEvaluationTraceType" />

    <xsd:complexType name="PolicyConstraintEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for policy constraint evaluation operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element ref="tns:abstractPolicyConstraint" minOccurs="0" />
                    <xsd:element name="trigger" type="tns:EvaluatedPolicyRuleTriggerType" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="policyConstraintEvaluationTrace" type="tns:PolicyConstraintEvaluationTraceType" />

    <xsd:complexType name="PolicyRuleEvaluationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for policy rule evaluation operation.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <xsd:element name="policyRule" type="tns:PolicyRuleType" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="policyRuleEvaluationTrace" type="tns:PolicyRuleEvaluationTraceType" />

    <xsd:complexType name="ApprovalProcessStartInstructionCreationTraceType">
        <xsd:annotation>
            <xsd:documentation>
                Trace for operation(s) that create approval process start instruction(s).
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:TraceType">
                <xsd:sequence>
                    <!-- PcpStartInstruction or StartInstruction is basically a wrapper for CaseType -->
                    <xsd:element name="caseRef" type="tns:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:composite>true</a:composite>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="approvalProcessStartInstructionCreationTrace" type="tns:ApprovalProcessStartInstructionCreationTraceType" />

    <xsd:complexType name="CacheUseTraceType">
        <xsd:annotation>
            <xsd:documentation>

            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="category" type="tns:CacheUseCategoryTraceType" minOccurs="0" />
            <xsd:element name="comment" type="xsd:string" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="cacheUseTrace" type="tns:CacheUseTraceType" />

    <xsd:simpleType name="CacheUseCategoryTraceType">
        <xsd:annotation>
            <xsd:documentation>
                How was the cache used?
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="hit">
                <xsd:annotation>
                    <xsd:documentation>
                        Cache hit was encountered.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="HIT"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="weakHit">
                <xsd:annotation>
                    <xsd:documentation>
                        Cache "weak hit" was encountered. (E.g. the version had to be checked but was found OK.)
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="WEAK_HIT"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="miss">
                <xsd:annotation>
                    <xsd:documentation>
                        Cache miss was encountered.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="MISS"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="pass">
                <xsd:annotation>
                    <xsd:documentation>
                        Cache was passed through.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="PASS"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="notAvailable">
                <xsd:annotation>
                    <xsd:documentation>
                        Cache was not available.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NOT_AVAILABLE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="notApplicable">
                <xsd:annotation>
                    <xsd:documentation>
                        Cache was not applicable for given kind of operation.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NOT_APPLICABLE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="ProcessTracingConfigurationType">
        <xsd:annotation>
            <xsd:documentation>
                Configuration for tracing execution of a process involving repeated processing of a set of items
                (repo objects, resource objects, changes, and so on).
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.0.1</a:since>
                <a:container>true</a:container>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="interval" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Traces processing of each N-th item.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:displayName>Tracing interval</a:displayName>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="tracingProfile" type="c:TracingProfileType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Tracing profile to be used.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:displayName>Tracing profile</a:displayName>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>

            <xsd:element name="tracingPoint" type="c:TracingRootType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Point(s) to be traced.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:displayName>Tracing root</a:displayName>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="processTracingConfiguration" type="tns:ProcessTracingConfigurationType"/>

    <xsd:complexType name="TracingProfileType">
        <xsd:annotation>
            <xsd:documentation>
                Describes how the tracing is to be done.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="name" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Name of the tracing profile.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="displayName" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Name of the tracing profile.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="visible" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Should be this profile visible in GUI? (experimental/temporary)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="default" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Is this the default profile?
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="ref" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        References to tracing profile(s) this one is derived from.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="fileNamePattern" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Pattern of the file name. Can use macros like %{timestamp}, %{testName}, %{testNameShort},
                        %{focusName}, %{milliseconds}, etc.

                        The default is trace-%{timestamp} e.g. trace-2019-06-24-19-14-49-503.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectNamePattern" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Pattern for the repo object. The default is the same as the file name.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="createTraceFile" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether the trace file is to be created. (Default is true.)
                        A value of false is useful e.g. in tests where we might want to collect trace information
                        but don't need to store it for external use.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>4.0.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="createRepoObject" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether the repository object pointing to the stored trace is to be created. (Default is true.)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="compressOutput" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether the output is to be compressed when saving. (Default is true.)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="hideDeploymentInformation" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to hide or include deployment information (except for subscription identifier) in the trace.
                        Default is false, i.e. the deployment information is included.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="collectLogEntries" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to collect log entries. (Default is false.)
                        Temporary. Will be replaced with something more elaborate.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="loggingOverride" type="tns:LoggingOverrideType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        How to override logging while this tracing profile is active.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="recordObjectsFound" type="xsd:int" minOccurs="0" default="5">
                <xsd:annotation>
                    <xsd:documentation>
                        How many objects found (e.g. in search operations) we want to store.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>4.0.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="recordObjectReferencesFound" type="xsd:int" minOccurs="0" default="10">
                <xsd:annotation>
                    <xsd:documentation>
                        How many objects references found (e.g. in search operations) we want to store.
                        This starts counting after full objects are stored.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>4.0.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="tracingTypeProfile" type="tns:TracingTypeProfileType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        How to profile individual operations.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="tracingProfile" type="tns:TracingProfileType" />

    <xsd:complexType name="TracingTypeProfileType">
        <xsd:annotation>
            <xsd:documentation>
                Describes how the tracing of specific type is to be done.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="operationType" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Operation(s) to which this tracing type profile is applied.
                        (Represented as QNames of corresponding TraceType subtypes.)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="level" type="tns:TracingLevelType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Level of details to be stored when tracing this operation type.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="tracingTypeProfile" type="tns:TracingTypeProfileType" />

    <xsd:simpleType name="TracingRootType">
        <xsd:annotation>
            <xsd:documentation>
                Points at which tracing can be requested.
                Each of them has to implement appropriate logic to start tracing and store the result.

                EXPERIMENTAL
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.0</a:since>
                <a:experimental>true</a:experimental>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="clockworkRun">
                <xsd:annotation>
                    <xsd:documentation>
                        Clockwork.run execution.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="CLOCKWORK_RUN"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="iterativeTaskObjectProcessing">
                <xsd:annotation>
                    <xsd:documentation>
                        Object processing for iterative task.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ITERATIVE_TASK_OBJECT_PROCESSING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="asynchronousMessageProcessing">
                <xsd:annotation>
                    <xsd:documentation>
                        Processing of asynchronous message.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ASYNCHRONOUS_MESSAGE_PROCESSING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="liveSyncChangeProcessing">
                <xsd:annotation>
                    <xsd:documentation>
                        Processing of live sync change event.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="LIVE_SYNC_CHANGE_PROCESSING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="retrievedResourceObjectProcessing">
                <xsd:annotation>
                    <xsd:documentation>
                        Processing of object retrieved from a resource (e.g. when doing import or reconciliation).
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="RETRIEVED_RESOURCE_OBJECT_PROCESSING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="workflowOperation">
                <xsd:annotation>
                    <xsd:documentation>
                        Processing of workflow operation.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="WORKFLOW_OPERATION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="TracingLevelType">
        <xsd:annotation>
            <xsd:documentation>
                Level of tracing.

                EXPERIMENTAL
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.0</a:since>
                <a:experimental>true</a:experimental>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="off">
                <xsd:annotation>
                    <xsd:documentation>
                        There is no tracing at this trace point. TraceType is simply not created.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="OFF"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="minimal">
                <xsd:annotation>
                    <xsd:documentation>
                        Only minimal tracing is done. This level is meant to provide information needed to understand what's
                        going on at particular tracing point, but with none to minimal performance penalty: typically when doing
                        performance analysis. So information that is stored should be quickly obtainable and should not take
                        too much space.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="MINIMAL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="normal">
                <xsd:annotation>
                    <xsd:documentation>
                        Standard tracing, designed to provide as much information as practically possible for general
                        troubleshooting. It is accepted that it comes with a performance penalty e.g. when serializing
                        model context at many places.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NORMAL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="detailed">
                <xsd:annotation>
                    <xsd:documentation>
                        Detailed tracing, designed to troubleshoot a specific component. This is a level that would produce
                        over-sized traces when enabled globally.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="DETAILED"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="TraceDictionaryType">
        <xsd:annotation>
            <xsd:documentation>
                Object dictionary. Very experimental.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="identifier" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Identifier of the dictionary. Used when multiple dictionaries are to be merged.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>4.0.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="entry" type="tns:TraceDictionaryEntryType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Single entry.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="traceDictionary" type="tns:TraceDictionaryType" />

    <xsd:complexType name="TraceDictionaryEntryType">
        <xsd:annotation>
            <xsd:documentation>
                One object.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="identifier" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Entry identifier.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="originDictionaryId" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Identifier of the dictionary in which this entry was originally created.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>4.0.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="object" type="tns:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Object. The reference must contain full object.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="traceDictionaryEntry" type="tns:TraceDictionaryEntryType" />

    <xsd:complexType name="TracingOutputType">
        <xsd:annotation>
            <xsd:documentation>
                Output of the tracing.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="metadata" type="tns:TracingOutputMetadataType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Metadata e.g. time of creation, etc.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="environment" type="tns:TracingEnvironmentType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Description of the environment where the trace was captured. E.g. the deployment information,
                        enclosing task, and so on.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="result" type="tns:OperationResultType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Operation result tree.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="dictionary" type="tns:TraceDictionaryType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Object dictionary.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="tracingOutput" type="tns:TracingOutputType" />

    <xsd:complexType name="TracingOutputMetadataType">
        <xsd:annotation>
            <xsd:documentation>
                Metadata e.g. time of creation, etc.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="createTimestamp" type="xsd:dateTime" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        When the tracing output was created.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="creatorRef" type="tns:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        The creator.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="profile" type="tns:TracingProfileType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Tracing profile used.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="tracingOutputMetadata" type="tns:TracingOutputMetadataType" />

    <xsd:complexType name="TracingEnvironmentType">
        <xsd:annotation>
            <xsd:documentation>
                Description of the environment where the trace was captured. E.g. the deployment information,
                enclosing task, and so on.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="deployment" type="tns:DeploymentInformationType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Information about the deployment. Subscription information is excluded.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="taskRef" type="tns:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Enclosing task. Some parts (e.g. operation result children) are excluded to save space.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="nodeRef" type="tns:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Selected information about the current node. Sensitive parts (e.g. IP addresses) are excluded.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:composite>true</a:composite>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:long"/>
    </xsd:complexType>
    <xsd:element name="tracingEnvironment" type="tns:TracingEnvironmentType" />

    <xsd:complexType name="LoggingOverrideType">
        <xsd:annotation>
            <xsd:documentation>
                Information how to override logging configuration.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimenta>true</a:experimenta>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="levelOverride" type="tns:ClassLoggerLevelOverrideType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Overridden level(s) for particular logger(s).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="loggingOverride" type="tns:LoggingOverrideType" />

    <xsd:complexType name="ClassLoggerLevelOverrideType">
        <xsd:annotation>
            <xsd:documentation>
                Information how to override logging level for specified logger(s).
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimenta>true</a:experimenta>
                <a:container>true</a:container>
                <a:since>4.0</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="logger" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Loggers to override. All loggers with a given prefixes will be overridden using the specified level.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="level" type="tns:LoggingLevelType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Level to set for given loggers.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="classLoggerLevelOverride" type="tns:ClassLoggerLevelOverrideType" />

    <xsd:complexType name="AnyValueType">
        <xsd:annotation>
            <xsd:documentation>
                Any value (property, reference, container).
                EXPERIMENTAL

                This is a workaround to avoid using xsd:anyType directly in a container. It is mapped to a property;
                however, it cannot be always serialized as a property.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="value" type="xsd:anyType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:rawType>true</a:rawType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="textValue" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        If the value is not directly representable in XML/JSON/YAML we at least store its text version
                        (debugDump or toString or similar) here.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="anyValue" type="tns:AnyValueType" />

    <xsd:complexType name="NamedValueType">
        <xsd:annotation>
            <xsd:documentation>
                Any value (property, reference, container) along with its name.

                This is a workaround to avoid using xsd:anyType directly in a container. It is mapped to a property;
                however, it cannot be always serialized as a property.
            </xsd:documentation>
            <xsd:appinfo>
                <a:experimental>true</a:experimental>
                <a:since>4.0.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AnyValueType">
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:QName" minOccurs="0" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="namedValue" type="tns:NamedValueType" />

<!--    <xsd:complexType name="AnyValuesType">-->
<!--        <xsd:annotation>-->
<!--            <xsd:documentation>-->
<!--                List of any value (property, reference, container).-->
<!--                EXPERIMENTAL-->

<!--                This is a workaround to avoid using xsd:anyType directly in a container. It is mapped to a property;-->
<!--                however, it cannot be always serialized as a property.-->
<!--            </xsd:documentation>-->
<!--            <xsd:appinfo>-->
<!--                <a:experimental>true</a:experimental>-->
<!--                <a:since>4.0.1</a:since>-->
<!--            </xsd:appinfo>-->
<!--        </xsd:annotation>-->
<!--        <xsd:sequence>-->
<!--            <xsd:element name="value" type="tns:AnyValueType" minOccurs="0" maxOccurs="unbounded">-->
<!--                <xsd:annotation>-->
<!--                    <xsd:appinfo>-->
<!--                        <a:rawType>true</a:rawType>-->
<!--                    </xsd:appinfo>-->
<!--                </xsd:annotation>-->
<!--            </xsd:element>-->
<!--        </xsd:sequence>-->
<!--    </xsd:complexType>-->
<!--    <xsd:element name="anyValues" type="tns:AnyValuesType" />-->

    <xsd:simpleType name="OperationKindType">
        <xsd:annotation>
            <xsd:documentation>
                Kind of operation (captured by OperationResult).
                HIGHLY EXPERIMENTAL. Maybe it will be scrapped in the near future.
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.1</a:since>
                <a:experimental>true</a:experimental>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="clockworkExecution">
                <xsd:annotation>
                    <xsd:documentation>
                        Whole execution (run) of the clockwork.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="CLOCKWORK_EXECUTION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="clockworkClick">
                <xsd:annotation>
                    <xsd:documentation>
                        Single click of the clockwork.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="CLOCKWORK_CLICK"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="projectorExecution">
                <xsd:annotation>
                    <xsd:documentation>
                        Execution of the projector.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="PROJECTOR_EXECUTION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="mappingEvaluation">
                <xsd:annotation>
                    <xsd:documentation>
                        Evaluation of a mapping.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="MAPPING_EVALUATION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="scriptEvaluation">
                <xsd:annotation>
                    <xsd:documentation>
                        Evaluation of a script.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="SCRIPT_EVALUATION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="repositoryCache">
                <xsd:annotation>
                    <xsd:documentation>
                        Repository cache operation.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="REPOSITORY_CACHE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="repository">
                <xsd:annotation>
                    <xsd:documentation>
                        Repository operation.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="REPOSITORY"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="focusLoadCheck">
                <xsd:annotation>
                    <xsd:documentation>
                        Check whether focus should be loaded.
                        TODO really?
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="FOCUS_LOAD_CHECK"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="focusLoad">
                <xsd:annotation>
                    <xsd:documentation>
                        Focus load check that resulted in focus being loaded.
                        TODO really?
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="FOCUS_LOAD"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="projectionLoad">
                <xsd:annotation>
                    <xsd:documentation>
                        Projection load.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="PROJECTION_LOAD"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="fullProjectionLoad">
                <xsd:annotation>
                    <xsd:documentation>
                        Full projection load.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="FULL_PROJECTION_LOAD"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="focusChangeExecution">
                <xsd:annotation>
                    <xsd:documentation>
                        Execution of focus change.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="FOCUS_CHANGE_EXECUTION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="projectionChangeExecution">
                <xsd:annotation>
                    <xsd:documentation>
                        Execution of projection change.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="PROJECTION_CHANGE_EXECUTION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="provisioning">
                <xsd:annotation>
                    <xsd:documentation>
                        Provisioning API operation.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="PROVISIONING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="connector">
                <xsd:annotation>
                    <xsd:documentation>
                        Connector operation.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="CONNECTOR"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="other">
                <xsd:annotation>
                    <xsd:documentation>
                        Other kind of operation.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="OTHER"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="TraceVisualizationInstructionsType">
        <xsd:annotation>
            <xsd:documentation>
                How to visualize trace file.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container>true</a:container>
                <a:experimental>true</a:experimental>
                <a:since>4.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="instruction" type="tns:TraceVisualizationInstructionType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="columns" type="tns:TraceVisualizationColumnsType" minOccurs="0" />
            <xsd:element name="dataFlow" type="tns:TraceDataFlowVisualizationInstructionType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Specification of the data flow(s) to be visualized.
                        Currently not implemented.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="traceVisualizationInstructions" type="tns:TraceVisualizationInstructionsType" />

    <xsd:complexType name="TraceVisualizationInstructionType">
        <xsd:annotation>
            <xsd:documentation>
                How to visualize trace file.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container>true</a:container>
                <a:experimental>true</a:experimental>
                <a:since>4.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="order" type="xsd:int" minOccurs="0" />
            <xsd:element name="selector" type="tns:TraceSelectorType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Any of these selectors may match. (TODO reconsider)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="visualization" type="tns:TraceVisualizationType" minOccurs="0" />
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="traceVisualizationInstruction" type="tns:TraceVisualizationInstructionType" />

    <xsd:complexType name="TraceVisualizationColumnsType">
        <xsd:annotation>
            <xsd:documentation>
                What columns to visualize?
                Volatile - will be changed soon.
                E.g. we want to specify exact order of columns.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container>true</a:container>
                <a:experimental>true</a:experimental>
                <a:since>4.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="invocationId" type="xsd:boolean" minOccurs="0" />
            <xsd:element name="duration" type="xsd:boolean" minOccurs="0" />
            <xsd:element name="durationBefore" type="xsd:boolean" minOccurs="0" />
            <!-- The following two be replaced by references to enums instead of strings -->
            <xsd:element name="countFor" type="xsd:string" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="timeFor" type="xsd:string" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="traceVisualizationColumns" type="tns:TraceVisualizationColumnsType" />

    <xsd:complexType name="TraceSelectorType">
        <xsd:annotation>
            <xsd:documentation>
                Selects an operation trace. If more conditions are specified, all of them must apply.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container>true</a:container>
                <a:experimental>true</a:experimental>
                <a:since>4.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="traceType" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Type of the trace to match. Applies if any of the types match.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="operationKind" type="tns:OperationKindType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Kind of operation to match. Applies if any of the kinds matches.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="traceSelector" type="tns:TraceSelectorType" />

    <xsd:complexType name="TraceVisualizationType">
        <xsd:annotation>
            <xsd:documentation>
                How a traced operation is to be visualized.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container>true</a:container>
                <a:experimental>true</a:experimental>
                <a:since>4.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="generic" type="tns:GenericTraceVisualizationType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Generic visualization type (off, one-liner, detailed). TODO.
                        The interpretation is left to the particular trace visualizer.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="data" type="tns:TraceDataSelectionType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        What kind of data are to be shown?
                        The interpretation is left to the particular trace visualizer.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="traceVisualization" type="tns:TraceVisualizationType" />

    <xsd:simpleType name="GenericTraceVisualizationType">
        <xsd:annotation>
            <xsd:documentation>
                Generic visualization type (off, one-liner, detailed). TODO.
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.1</a:since>
                <a:experimental>true</a:experimental>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="stop">
                <xsd:annotation>
                    <xsd:documentation>
                        The trace nor its children are not visualized.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="STOP"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="hide">
                <xsd:annotation>
                    <xsd:documentation>
                        The trace is not visualized. But its children could be.
                        This is the default.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="HIDE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="oneLine">
                <xsd:annotation>
                    <xsd:documentation>
                        The trace is visualized in "one-line" mode. No details.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ONE_LINE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="brief">
                <xsd:annotation>
                    <xsd:documentation>
                        The trace is visualized in brief form - potentially multiline but less detailed.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="BRIEF"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="detailed">
                <xsd:annotation>
                    <xsd:documentation>
                        The trace is visualized in details.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="DETAILED"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="full">
                <xsd:annotation>
                    <xsd:documentation>
                        The trace is visualized in full details.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="FULL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="TraceDataSelectionType">
        <xsd:annotation>
            <xsd:documentation>
                Generic data selection rule.
            </xsd:documentation>
            <xsd:appinfo>
                <a:since>4.1</a:since>
                <a:experimental>true</a:experimental>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="none">
                <xsd:annotation>
                    <xsd:documentation>
                        No "instance" data shown.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NONE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="nonOperational">
                <xsd:annotation>
                    <xsd:documentation>
                        Non-operational data shown.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NON_OPERATIONAL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="all">
                <xsd:annotation>
                    <xsd:documentation>
                        All data is shown.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ALL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="TraceDataFlowVisualizationInstructionType">
        <xsd:annotation>
            <xsd:documentation>
                Specification of the data flow(s) to be visualized.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container>true</a:container>
                <a:experimental>true</a:experimental>
                <a:since>4.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="item" type="t:ItemPathType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Initial set of items to be shown.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="lookBackward" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to look backward i.e. to the source(s) for specified item(s).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="lookForward" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to look forward i.e. to the target(s) derived from specified item(s).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="traceDataFlowVisualizationInstruction" type="tns:TraceDataFlowVisualizationInstructionType" />
</xsd:schema>
