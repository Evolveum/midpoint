<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2020 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/test/foo-1.xsd"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/test/foo-1.xsd"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
            xmlns:ft="http://midpoint.evolveum.com/xml/ns/test/foo-types-1"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
            elementFormDefault="qualified"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            Testing schema for Prism framework
        </xsd:documentation>
        <xsd:appinfo>
            <jaxb:globalBindings>
                <xjc:typeSubstitution type="complex" />
                <xjc:serializable uid="201202081233" />
            </jaxb:globalBindings>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-3" schemaLocation="http://prism.evolveum.com/xml/ns/public/types-3">
        <xsd:annotation>
            <xsd:documentation>
                The XML Encryption schema. Used for "protected" data types (property encryption).
            </xsd:documentation>
        </xsd:annotation>
    </xsd:import>

    <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/test/foo-types-1" schemaLocation="http://midpoint.evolveum.com/xml/ns/test/foo-types-1"/>

    <xsd:element name="name" type="t:PolyStringType"/>
    <xsd:element name="displayName" type="xsd:string"/>
    <xsd:element name="description" type="xsd:string"/>
    <xsd:element name="extension">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:any namespace="##any" minOccurs="0" maxOccurs="unbounded" processContents="lax">
                </xsd:any>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <!-- Basic Object Types -->

    <xsd:complexType name="ObjectType" abstract="true">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
                <a:object/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="tns:name" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:displayName>ObjectType.name</a:displayName>
                        <a:displayOrder>0</a:displayOrder>
                        <a:help>Short unique name of the object</a:help>
                        <a:emphasized>true</a:emphasized>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element ref="tns:description" minOccurs="0"/>
            <xsd:element ref="tns:extension" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:displayName>ObjectType.extension</a:displayName>
                        <a:displayOrder>1000</a:displayOrder>
                        <a:help>Object extension contains extra properties</a:help>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="parentOrg" type="tns:ObjectType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:objectReference>tns:parentOrgRef</a:objectReference>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="parentOrgRef" type="tns:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:ObjectType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="oid" type="xsd:string" use="optional"/>
        <xsd:attribute name="version" type="xsd:string" use="optional"/>
    </xsd:complexType>
    <xsd:element name="object" type="tns:ObjectType"/>

    <xsd:complexType name="UserType">
        <xsd:complexContent>
            <xsd:extension base="tns:ObjectType">
                <xsd:sequence>
                    <!-- Single-valued properties -->
                    <xsd:element name="fullName" type="xsd:string">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:displayName>UserType.fullName</a:displayName>
                                <a:displayOrder>10</a:displayOrder>
                                <a:help>User full name</a:help>
                                <a:emphasized>true</a:emphasized>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="givenName" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="familyName" type="xsd:string" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:emphasized>true</a:emphasized>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <!-- Multi-valued property -->
                    <xsd:element name="additionalNames" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="polyName" type="t:PolyStringType" minOccurs="0"/>
                    <xsd:element name="locality" type="xsd:string" minOccurs="0" maxOccurs="1"/>
                    <!-- Multi-valued container -->
                    <xsd:element name="assignment" type="tns:AssignmentType" minOccurs="0" maxOccurs="unbounded"/>
                    <!-- Single-valued container -->
                    <xsd:element name="activation" type="tns:ActivationType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:displayName>ActivationType.activation</a:displayName>
                                <a:displayOrder>1200</a:displayOrder>
                                <a:help>User activation properties</a:help>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="password" type="t:ProtectedStringType" minOccurs="0"/>
                    <xsd:element name="account" type="tns:AccountType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:objectReference>tns:accountRef</a:objectReference>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="accountRef" type="tns:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:objectReferenceTargetType>tns:AccountType</a:objectReferenceTargetType>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <!-- element that has different names in XML/JSON/YAML and in java bean -->
                    <xsd:element name="special" type="xsd:string" minOccurs="0" maxOccurs="1"/>
                    <!-- single-occurence container -->
                    <xsd:element name="singleActivation" type="tns:ActivationType" minOccurs="0" />
                    <!-- multi-occurence container -->
                    <xsd:element name="multiActivation" type="tns:ActivationType" minOccurs="0" maxOccurs="unbounded" />
                    <!-- multi-occurence container -->
                    <xsd:element name="multiActivationCopy" type="tns:ActivationType" minOccurs="0" maxOccurs="unbounded" />
                    <!-- single-occurence structured property (not a container) -->
                    <xsd:element name="singleConstruction" type="tns:AccountConstructionType" minOccurs="0" />
                    <!-- multi-occurence container -->
                    <xsd:element name="multiConstruction" type="tns:AccountConstructionType" minOccurs="0" maxOccurs="unbounded" />
                    <!-- multi-occurence container -->
                    <xsd:element name="multiConstructionCopy" type="tns:AccountConstructionType" minOccurs="0" maxOccurs="unbounded" />

                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="user" type="tns:UserType"/>

    <xsd:complexType name="ObjectReferenceType">
        <xsd:annotation>
            <xsd:documentation>
                Reference to an object. It contains OID of the object that it refers to.
            </xsd:documentation>
            <xsd:appinfo>
                <a:objectReference/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="description" type="xsd:string" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Free-form description of this reference. Usually used to describe the purpose of
                        a search filter embedded in the reference.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="filter" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Filter that can be used to dynamically lookup the reference OID e.g. during imports.
                        It must not be used for normal operations and references with the filter must not
                        be stored in the repository.
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="object" minOccurs="0" maxOccurs="1">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
                    </xsd:sequence>
                    <xsd:anyAttribute namespace="##any" processContents="lax"/>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="oid" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Target of the reference.

                    Optional only during imports. The objects stored in the repository must have the OID
                    value filled in.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="type" type="xsd:QName" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    XSD type of the reference target object.

                    It should be provided if the type is known (e.g. when
                    reading object from the repository).

                    The primary reason for this is to have some kind of
                    type safety but especially to be able to use
                    this in the XPaths that specify what references to resolve.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="incomplete" type="xsd:boolean" use="optional"/>
    </xsd:complexType>


    <xsd:complexType name="AccountType">
        <xsd:complexContent>
            <xsd:extension base="tns:ObjectType">
                <xsd:sequence>
                    <xsd:element name="attributes" type="tns:AttributesType" minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="account" type="tns:AccountType"/>

    <xsd:complexType name="AssignmentType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="description" type="xsd:string" minOccurs="0"/>
            <xsd:element name="note" type="xsd:string" minOccurs="0"/>
            <xsd:element name="accountConstruction" type="tns:AccountConstructionType" minOccurs="0"/>
            <xsd:element name="activation" type="tns:ActivationType" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="id" type="xsd:string" use="optional"/>
        <xsd:attribute name="incomplete" type="xsd:boolean" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="AccountConstructionType">
        <xsd:annotation>
            <xsd:documentation>
                Account construction type is NOT a container. It is a complex-type property.
                This tests the ability to deal with complex type properties and also with
                dateTime and RawType fields in them.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="howto" type="xsd:string" minOccurs="0"/>
            <xsd:element name="when" type="xsd:dateTime" minOccurs="0"/>
            <xsd:element name="value" type="t:RawType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ActivationType">
        <xsd:annotation>
            <xsd:documentation>
                ActivationTyps is a container, therefore the following elements are properties.
                This tests the ability to deal with boolean and dateTime properties.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
                <a:operational>true</a:operational>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="enabled" type="xsd:boolean" minOccurs="0"/>
            <xsd:element name="validFrom" type="xsd:dateTime" minOccurs="0"/>
            <xsd:element name="validTo" type="xsd:dateTime" minOccurs="0"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="AttributesType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="DummyProtectedStringType">
        <xsd:annotation>
            <xsd:documentation>
                This type mimmicks a complex type that may be used in properties.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="value" type="xsd:string"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="FooObjectClass">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="ft:uid" minOccurs="0"/>
            <xsd:element ref="ft:name" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="foo" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="ResourceType">
        <xsd:complexContent>
            <xsd:extension base="tns:ObjectType">
                <xsd:sequence>
                    <xsd:element name="schema" type="t:SchemaDefinitionType" minOccurs="0" maxOccurs="1"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="resource" type="tns:ResourceType"/>

    <!-- The following is currently not supported by prism. Keeping it here if needed in the future... -->
    <xsd:complexType name="EventHandlerType">
        <xsd:attribute name="name" type="xsd:string"/>
    </xsd:complexType>
    <xsd:element name="handler" type="tns:EventHandlerType" abstract="true" />

    <xsd:complexType name="EventHandlerChainType">
        <xsd:complexContent>
            <xsd:extension base="tns:EventHandlerType">
                <xsd:sequence>
                    <xsd:element ref="tns:handler" minOccurs="0" maxOccurs="unbounded" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="handlerChain" type="tns:EventHandlerChainType" substitutionGroup="tns:handler" />

    <xsd:complexType name="EventCategoryFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:EventHandlerType">
                <xsd:sequence>
                    <xsd:element name="category" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="categoryFilter" type="tns:EventCategoryFilterType" substitutionGroup="tns:handler" />

    <xsd:complexType name="EventStatusFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:EventHandlerType">
                <xsd:sequence>
                    <xsd:element name="status" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="statusFilter" type="tns:EventStatusFilterType" substitutionGroup="tns:handler" />

    <xsd:complexType name="EventOperationFilterType">
        <xsd:complexContent>
            <xsd:extension base="tns:EventHandlerType">
                <xsd:sequence>
                    <xsd:element name="operation" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="operationFilter" type="tns:EventOperationFilterType" substitutionGroup="tns:handler" />

</xsd:schema>

