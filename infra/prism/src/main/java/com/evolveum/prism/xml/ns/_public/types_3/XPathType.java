//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2014.02.10 at 04:33:35 PM CET
//


package com.evolveum.prism.xml.ns._public.types_3;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;


/**
 *
 *                 Defines a type for XPath pointer. It points to a specific part
 *                 of the XML tree. Only a path expressions should be used in
 *                 this type, as it is used as an l-value, i.e. pointing to a
 *                 part of XML where an value can be assigned.
 *
 *                 XPath expression selecting the property container.
 *                 It must select exactly one XML element. It must not be used to
 *                 select XML constructs inside a property, unless such property is
 *                 in itself an object.
 *
 *                 The root of the path is assumed to be the element of the
 *                 top-most ObjectType. Path attribute may be omitted. In that
 *                 case it is assumed to be "/". The path should be absolute,
 *                 starting with leading slash ("/"). If the leading slash is
 *                 not present, it should be assumed, but warning message
 *                 should be logged in such case.
 *
 *                 DEPRECATED. use ItemPathType instead
 *
 *                 cf. ExpressionType
 *
 *
 * <p>Java class for XPathType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="XPathType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "XPathType", propOrder = {
    "content"
})
public class XPathType {

    @XmlValue
    protected String content;

    /**
     *
     *                 Defines a type for XPath pointer. It points to a specific part
     *                 of the XML tree. Only a path expressions should be used in
     *                 this type, as it is used as an l-value, i.e. pointing to a
     *                 part of XML where an value can be assigned.
     *
     *                 XPath expression selecting the property container.
     *                 It must select exactly one XML element. It must not be used to
     *                 select XML constructs inside a property, unless such property is
     *                 in itself an object.
     *
     *                 The root of the path is assumed to be the element of the
     *                 top-most ObjectType. Path attribute may be omitted. In that
     *                 case it is assumed to be "/". The path should be absolute,
     *                 starting with leading slash ("/"). If the leading slash is
     *                 not present, it should be assumed, but warning message
     *                 should be logged in such case.
     *
     *                 DEPRECATED. use ItemPathType instead
     *
     *                 cf. ExpressionType
     *
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getContent() {
        return content;
    }

    /**
     * Sets the value of the content property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setContent(String value) {
        this.content = value;
    }

    @Override
    public boolean equals(Object obj) {
    	if (!(obj instanceof XPathType)){
    		return false;
    	}

    	XPathType other = (XPathType) obj;
    	String otherValue = other.getContent();
    	String thisValue = content;

    	if (thisValue == null && otherValue == null){
    		return true;
    	}

    	if (thisValue == null || otherValue == null){
    		return false;
    	}

    	return thisValue.equals(otherValue);
//
//
//    	return super.equals(obj);
    }

    @Override
    public String toString() {
    	return "[path: "+content+"]";
    }

}
