<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2016 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xsd:schema targetNamespace="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:tns="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            elementFormDefault="qualified"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            Common Prism annotations used in various XSD schemas.

			Version: 3.4
            Default prefix: a
        </xsd:documentation>
    </xsd:annotation>

    <xsd:element name="container">
        <xsd:annotation>
            <xsd:documentation>
                Item marker annotation: Container marker. This annotation marks complex types that are considered prism containers.

                Every first-level element in a container is prism item (property, another container or reference) even if
                it has no extra annotation.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="object">
        <xsd:annotation>
            <xsd:documentation>
                Item marker annotation: Object marker. This annotation marks complex types that are considered prism objects.
				Note: prism object are also containers.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="type" type="xsd:QName">
        <xsd:annotation>
            <xsd:documentation>
            	Type override annotation.
                TODO
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="displayName" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
            	Item annotation: item display name. The content of this annotation specifies a
            	human-readable string that describes the type.
            	E.g. "User" may be a good display name for UserType.
            	It may also contain key to the catalog file.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="displayOrder" type="xsd:int">
        <xsd:annotation>
            <xsd:documentation>
            	Item annotation: display order. The content of this annotation specifies
            	an order in which the item should be displayed relative to other items
            	at the same level. The items will be displayed by sorting them by the
            	values of displayOrder annotation (ascending). Items that do not have
            	any displayOrder annotation will be displayed last. The ordering of
            	values with the same displayOrder is undefined and it may be arbitrary.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="help" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
            	Item annotation: help text. The help text is usually displayed as a tooltip
            	or when a special icon is clicked.
            	It may also contain key to the catalog file. 
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="access" type="tns:AccessAnnotationType">
        <xsd:annotation>
            <xsd:documentation>
            	Item annotation: access restrictions. This annotation specifies the allowed
            	operations for an item. If no access annotation is present then all
            	operations are allowed.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:simpleType name="AccessAnnotationType">
    	<xsd:restriction base="xsd:string">
            <xsd:enumeration value="read">
            </xsd:enumeration>
            <xsd:enumeration value="update">
            </xsd:enumeration>
            <xsd:enumeration value="create">
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:element name="indexed" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                Property marker annotation: indexed property. Property that has this
                annotation should be indexed in the data store.
                WARNING: Presence of this annotation may impose some restriction on the
                property, usually a length restriction. E.g. database systems usually
                restrict the length of a datatype that can be efficiently indexed.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="index" type="tns:IndexType">
        <xsd:annotation>
            <xsd:documentation>
                Item annotation: Specifies type of index that is maintained for this
                item. The data store maintains this type of index for the item.
                This annotation may appear several times (maxOccurs=unbounded).
                This annotation implies indexed=true.
                WARNING: Presence of this annotation may impose some restriction on the
                property, usually a length restriction. E.g. database systems usually
                restrict the length of a datatype that can be efficiently indexed.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
        <xsd:simpleType name="IndexType">
        <xsd:annotation>
            <xsd:documentation>
                Type of index maintained by the data store.
            </xsd:documentation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="equality">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="EQUALITY"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="substring">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="SUBSTRING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="presence">
                <xsd:annotation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="PRESENCE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>
    
    
    <xsd:element name="ignore" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                Item marker annotation: ignored item. Item that has this annotation
                should be ignored by any processing. The ignored item is still part
                of the schema. Item instances may appear in the serialized data formats
                (e.g. XML) or data store and the parser should not raise an error if
                it encounters them. But any high-level processing code should ignore
                presence of this item. E.g. it should not be displayed to the user, should
                not be present in transformed data structures, etc.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="operational" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                Marks operational property. Operational properties are auxiliary data
                (or meta-data) that are usually not modifiable by the end user. They are
                generated and maintained by the system. Operational properties are also
                not usually displayed unless it is explicitly requested.
                
                The example of operation properties are modification timestamps, create timestamps,
                user that made the last change, etc.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="composite" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                Marks composite reference. Composite references do not refer to the target
                object by OID but rather contain the entire target object forming a composition.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="deprecated" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                Marks deprecated parts of the schema.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="emphasized" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
     			Set true for definitions that are more important than others and that should be emphasized
     			during presentation. E.g. the emphasized definitions will always be displayed in the user
     			interfaces (even if they are empty), they will always be included in the dumps, etc.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="expensive" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                Marks an expensive item. Expensive items are not returned from some operations
                by default. They have to be explicitly requested.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="relational" type="xsd:boolean">
        <xsd:annotation>
            <xsd:documentation>
                Marks a container that contains relational data. The relational container
                provides data that are normally stored in a simple relational table.
                The relational container must only contain primitive items (properties or references, not containers).
                It is expected that relational container will have many values.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="extension" type="xsd:QName">
        <xsd:annotation>
            <xsd:documentation>
                Complex type annotation. Complex type that contains this annotation
                defines the content of the 'extension' item of data type specified by the
                content of this annotation. E.g. in the content of this annotation is
                c:UserType then the complex type that has this annotation defines the
                structure of 'extension' element of UserType objects.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="objectReference">
        <xsd:annotation>
            <xsd:documentation>
                Item marker annotation: object reference. This annotation specifies that
                an element or data type is object reference (PrismReference). 
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="objectReferenceTargetType" type="xsd:QName">
        <xsd:annotation>
            <xsd:documentation>
                Object reference annotation: reference target type. Content of this
                annotation specifies the object type that the reference points to. 
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:element name="maxOccurs" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                Same as normal maxOccurs XSD attribute, but can also be used
                with top-level elements.
                It may contain decimal string representation of a non-negative integer value or
                a string 'unbounded'.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    
    <xsd:attribute name="maxOccurs" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                Same as normal maxOccurs XSD attribute, but can also be used
                with dynamic elements similarly to xsi:type.
                It may contain decimal string representation of a non-negative integer value or
                a string 'unbounded'.
            </xsd:documentation>
        </xsd:annotation>    
    </xsd:attribute>
    
    <xsd:element name="since" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                Version of data model in which was the item introduced.
            </xsd:documentation>
        </xsd:annotation>    
    </xsd:element>

    <xsd:element name="deprecatedSince" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                Version of data model in which was the item marked as deprecated.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="label" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                Displayable label of enumeration item.
            </xsd:documentation>
        </xsd:annotation>    
    </xsd:element>

    <xsd:element name="matchingRule" type="xsd:QName">
        <xsd:annotation>
            <xsd:documentation>
                Matching rules are algorithms that specify
	 			how to compare, normalize and/or order the values. E.g. there are matching
				rules for case insensitive string comparison, for LDAP DNs, etc.
            </xsd:documentation>
        </xsd:annotation>    
    </xsd:element>
    
    <xsd:element name="valueEnumerationRef" type="tns:ObjectReferenceType">
        <xsd:annotation>
            <xsd:documentation>
                Reference to an object that directly or indirectly represents possible values for
				this item. We do not define here what exactly the object has to be. It can be a lookup
				table, script that dynamically produces the values or anything similar. 
				The object must produce the values of the correct type for this item otherwise an
				error occurs.
            </xsd:documentation>
        </xsd:annotation>    
    </xsd:element>
    
    <xsd:complexType name="ObjectReferenceType">
        <xsd:annotation>
            <xsd:documentation>
            	<p>
	                Reference to an object. It contains OID of the object that it
	                refers to.
	                This is simplified version of the "real" object reference used
	                in the main schemas. This has to be a duplicate to avoid circular
	                dependencies.
                </p>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="oid" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                	<p>
	                    Target of the reference.
                    </p>
					<p>
	                    Optional only during imports. The objects stored in the repository must have the OID
	                    value filled in.
                    </p>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="type" type="xsd:QName" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                	<p>
                    	Type of the reference target object.
                    </p>
					<p>
	                    It has to be provided unless the schema explicitly defines
	                    a non-polymorphic type for the reference target type. 
                    </p>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="defaultNamespace" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                When resolving unqualified elements, what should be the default namespace to look into at first.
                Applies to a container, currently at the topmost level.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="ignoredNamespace" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                When resolving unqualified elements, what namespace(s) should be ignored.
                String entered here is interpreted as a namespace prefix.
                Applies to a container, currently at the topmost level.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="heterogeneousListItem" type="xsd:string">
        <xsd:annotation>
            <xsd:documentation>
                This substitutable element can be used in "heterogeneous list" items, i.e. items that can have
				several values with different types. (All having a common declared supertype.) This annotation is necessary
				to minimize "guesswork" that XML parser has to do when processing substitutable elements - in order to lower
				the risk of accidentally merging two unrelated subsequent elements into one.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

</xsd:schema>


